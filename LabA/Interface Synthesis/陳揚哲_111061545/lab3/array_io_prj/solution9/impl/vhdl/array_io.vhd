-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity array_io is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    d_o_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_0_full_n : IN STD_LOGIC;
    d_o_0_write : OUT STD_LOGIC;
    d_o_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_1_full_n : IN STD_LOGIC;
    d_o_1_write : OUT STD_LOGIC;
    d_i_0_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_0_ce0 : OUT STD_LOGIC;
    d_i_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_0_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_0_ce1 : OUT STD_LOGIC;
    d_i_0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_1_ce0 : OUT STD_LOGIC;
    d_i_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_1_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_1_ce1 : OUT STD_LOGIC;
    d_i_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_2_ce0 : OUT STD_LOGIC;
    d_i_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_2_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_2_ce1 : OUT STD_LOGIC;
    d_i_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_3_ce0 : OUT STD_LOGIC;
    d_i_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_3_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    d_i_3_ce1 : OUT STD_LOGIC;
    d_i_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of array_io is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "array_io_array_io,hls_ip_2022_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-1-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.581000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1242,HLS_SYN_LUT=2199,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_o_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal d_o_1_blk_n : STD_LOGIC;
    signal reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal reg_407 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal ap_block_state7 : BOOLEAN;
    signal reg_417 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_422 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state5 : BOOLEAN;
    signal reg_446 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_450 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_466_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_fu_481_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_1_reg_1149 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_fu_496_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_2_reg_1187 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_fu_511_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_reg_1195 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_1_reg_1200 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_load_1_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_fu_526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_4_reg_1255 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_fu_540_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_5_reg_1263 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_2_load_1_reg_1268 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_3_load_1_reg_1274 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_fu_546_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_8_reg_1280 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_fu_551_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_9_reg_1285 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_fu_560_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_16_reg_1300 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_fu_570_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_17_reg_1306 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_load_6_reg_1322 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_1_fu_580_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_1_reg_1327 : STD_LOGIC_VECTOR (16 downto 0);
    signal d_i_1_load_6_reg_1332 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_5_fu_590_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_5_reg_1337 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_6_fu_612_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_6_reg_1355 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_fu_626_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_7_reg_1363 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_10_fu_640_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_10_reg_1368 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_11_fu_645_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_11_reg_1373 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_fu_654_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_18_reg_1378 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_fu_664_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_19_reg_1384 : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_2_load_6_reg_1400 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_9_fu_734_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_9_reg_1405 : STD_LOGIC_VECTOR (16 downto 0);
    signal d_i_3_load_6_reg_1410 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_13_fu_744_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_13_reg_1415 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_17_fu_838_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_17_reg_1430 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_21_fu_848_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_21_reg_1435 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_12_fu_864_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_12_reg_1450 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_13_fu_873_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_13_reg_1455 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_fu_878_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_20_reg_1460 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_fu_884_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_21_reg_1466 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_25_fu_962_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_25_reg_1472 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_29_fu_972_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_29_reg_1477 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_14_fu_988_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_14_reg_1482 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_fu_997_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_15_reg_1488 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_fu_1062_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_22_reg_1494 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_fu_1067_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_23_reg_1500 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_24_fu_1072_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_24_reg_1506 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_25_fu_1076_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_25_reg_1511 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_26_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_26_reg_1516 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_27_fu_1084_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_27_reg_1521 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_28_fu_1088_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_28_reg_1526 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_29_fu_1093_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_29_reg_1531 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_30_fu_1098_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_30_reg_1536 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_31_fu_1103_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_31_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_2_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_fu_822_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_4_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state8 : BOOLEAN;
    signal temp_5_fu_946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_6_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state9 : BOOLEAN;
    signal temp_7_fu_1050_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal ap_block_state12 : BOOLEAN;
    signal ap_block_state13 : BOOLEAN;
    signal ap_block_state14 : BOOLEAN;
    signal ap_block_state15 : BOOLEAN;
    signal ap_block_state16 : BOOLEAN;
    signal ap_block_state17 : BOOLEAN;
    signal ap_block_state18 : BOOLEAN;
    signal trunc_ln67_fu_462_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_1_fu_477_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_2_fu_492_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_3_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_4_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_5_fu_536_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_8_fu_576_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_8_fu_556_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_8_fu_576_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_11_fu_586_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_9_fu_566_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_11_fu_586_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln67_6_fu_608_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_7_fu_622_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln67_fu_596_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_9_fu_675_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_fu_632_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_2_fu_678_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_10_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_fu_670_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_1_fu_600_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_12_fu_705_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_1_fu_636_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_6_fu_708_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_13_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_4_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_14_fu_730_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_10_fu_650_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_14_fu_730_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_17_fu_740_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_11_fu_660_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_17_fu_740_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_2_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_15_fu_779_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_2_fu_758_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_10_fu_782_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_16_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_8_fu_774_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_3_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_18_fu_809_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_3_fu_762_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_14_fu_812_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_19_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_12_fu_804_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_20_fu_834_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_12_fu_766_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_20_fu_834_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_23_fu_844_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_13_fu_770_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_23_fu_844_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_4_fu_854_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_21_fu_903_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_4_fu_860_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_18_fu_906_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_22_fu_912_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_16_fu_898_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_5_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_24_fu_933_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_5_fu_869_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_22_fu_936_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_25_fu_942_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_20_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_26_fu_958_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_14_fu_890_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_26_fu_958_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_29_fu_968_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln69_15_fu_894_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_29_fu_968_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln67_6_fu_978_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_27_fu_1007_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_6_fu_984_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_26_fu_1010_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_28_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_24_fu_1002_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_7_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln67_30_fu_1037_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln69_7_fu_993_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_30_fu_1040_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln67_31_fu_1046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln67_28_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_402 <= d_i_0_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_402 <= d_i_0_q0;
            end if; 
        end if;
    end process;

    reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                reg_407 <= d_i_1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_407 <= d_i_1_q0;
            end if; 
        end if;
    end process;

    reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    reg_412 <= d_i_2_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    reg_412 <= d_i_2_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    reg_417 <= d_i_3_q1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    reg_417 <= d_i_3_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_422 <= d_i_0_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_422 <= d_i_0_q0;
            end if; 
        end if;
    end process;

    reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                reg_427 <= d_i_1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                reg_427 <= d_i_1_q0;
            end if; 
        end if;
    end process;

    reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_432 <= d_i_2_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_432 <= d_i_2_q0;
            end if; 
        end if;
    end process;

    reg_437_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_437 <= d_i_3_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_437 <= d_i_3_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                acc_0 <= temp_fu_688_p2;
                acc_1 <= temp_1_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                acc_2 <= temp_2_fu_792_p2;
                acc_3 <= temp_3_fu_822_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                acc_4 <= temp_4_fu_916_p2;
                acc_5 <= temp_5_fu_946_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                acc_6 <= temp_6_fu_1020_p2;
                acc_7 <= temp_7_fu_1050_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln67_13_reg_1415 <= add_ln67_13_fu_744_p2;
                add_ln67_9_reg_1405 <= add_ln67_9_fu_734_p2;
                add_ln69_10_reg_1368 <= add_ln69_10_fu_640_p2;
                add_ln69_11_reg_1373 <= add_ln69_11_fu_645_p2;
                add_ln69_18_reg_1378 <= add_ln69_18_fu_654_p2;
                add_ln69_19_reg_1384 <= add_ln69_19_fu_664_p2;
                add_ln69_6_reg_1355 <= add_ln69_6_fu_612_p2;
                add_ln69_7_reg_1363 <= add_ln69_7_fu_626_p2;
                d_i_2_load_6_reg_1400 <= d_i_2_q1;
                d_i_3_load_6_reg_1410 <= d_i_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln67_17_reg_1430 <= add_ln67_17_fu_838_p2;
                add_ln67_21_reg_1435 <= add_ln67_21_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln67_1_reg_1327 <= add_ln67_1_fu_580_p2;
                add_ln67_5_reg_1337 <= add_ln67_5_fu_590_p2;
                add_ln69_16_reg_1300 <= add_ln69_16_fu_560_p2;
                add_ln69_17_reg_1306 <= add_ln69_17_fu_570_p2;
                add_ln69_4_reg_1255 <= add_ln69_4_fu_526_p2;
                add_ln69_5_reg_1263 <= add_ln69_5_fu_540_p2;
                add_ln69_8_reg_1280 <= add_ln69_8_fu_546_p2;
                add_ln69_9_reg_1285 <= add_ln69_9_fu_551_p2;
                d_i_0_load_6_reg_1322 <= d_i_0_q1;
                d_i_1_load_6_reg_1332 <= d_i_1_q1;
                d_i_2_load_1_reg_1268 <= d_i_2_q1;
                d_i_3_load_1_reg_1274 <= d_i_3_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln67_25_reg_1472 <= add_ln67_25_fu_962_p2;
                add_ln67_29_reg_1477 <= add_ln67_29_fu_972_p2;
                add_ln69_12_reg_1450 <= add_ln69_12_fu_864_p2;
                add_ln69_13_reg_1455 <= add_ln69_13_fu_873_p2;
                add_ln69_20_reg_1460 <= add_ln69_20_fu_878_p2;
                add_ln69_21_reg_1466 <= add_ln69_21_fu_884_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln69_14_reg_1482 <= add_ln69_14_fu_988_p2;
                add_ln69_15_reg_1488 <= add_ln69_15_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln69_1_reg_1149 <= add_ln69_1_fu_481_p2;
                add_ln69_reg_1141 <= add_ln69_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln69_22_reg_1494 <= add_ln69_22_fu_1062_p2;
                add_ln69_23_reg_1500 <= add_ln69_23_fu_1067_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln69_24_reg_1506 <= add_ln69_24_fu_1072_p2;
                add_ln69_25_reg_1511 <= add_ln69_25_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln69_26_reg_1516 <= add_ln69_26_fu_1080_p2;
                add_ln69_27_reg_1521 <= add_ln69_27_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln69_28_reg_1526 <= add_ln69_28_fu_1088_p2;
                add_ln69_29_reg_1531 <= add_ln69_29_fu_1093_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln69_2_reg_1187 <= add_ln69_2_fu_496_p2;
                add_ln69_3_reg_1195 <= add_ln69_3_fu_511_p2;
                d_i_0_load_1_reg_1200 <= d_i_0_q1;
                d_i_1_load_1_reg_1206 <= d_i_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln69_30_reg_1536 <= add_ln69_30_fu_1098_p2;
                add_ln69_31_reg_1541 <= add_ln69_31_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then
                reg_442 <= d_i_0_q0;
                reg_446 <= d_i_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_450 <= d_i_2_q0;
                reg_454 <= d_i_3_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln67_10_fu_782_p2 <= std_logic_vector(signed(sext_ln67_15_fu_779_p1) + signed(sext_ln69_2_fu_758_p1));
    add_ln67_12_fu_804_p2 <= std_logic_vector(unsigned(acc_3) + unsigned(sext_ln67_3_fu_754_p1));
    add_ln67_13_fu_744_p2 <= std_logic_vector(signed(sext_ln69_11_fu_660_p1) + signed(sext_ln67_17_fu_740_p1));
    add_ln67_14_fu_812_p2 <= std_logic_vector(signed(sext_ln67_18_fu_809_p1) + signed(sext_ln69_3_fu_762_p1));
    add_ln67_16_fu_898_p2 <= std_logic_vector(unsigned(acc_4) + unsigned(sext_ln67_4_fu_854_p1));
    add_ln67_17_fu_838_p2 <= std_logic_vector(signed(sext_ln69_12_fu_766_p1) + signed(sext_ln67_20_fu_834_p1));
    add_ln67_18_fu_906_p2 <= std_logic_vector(signed(sext_ln67_21_fu_903_p1) + signed(sext_ln69_4_fu_860_p1));
    add_ln67_1_fu_580_p2 <= std_logic_vector(signed(sext_ln69_8_fu_556_p1) + signed(sext_ln67_8_fu_576_p1));
    add_ln67_20_fu_928_p2 <= std_logic_vector(unsigned(acc_5) + unsigned(sext_ln67_5_fu_857_p1));
    add_ln67_21_fu_848_p2 <= std_logic_vector(signed(sext_ln69_13_fu_770_p1) + signed(sext_ln67_23_fu_844_p1));
    add_ln67_22_fu_936_p2 <= std_logic_vector(signed(sext_ln67_24_fu_933_p1) + signed(sext_ln69_5_fu_869_p1));
    add_ln67_24_fu_1002_p2 <= std_logic_vector(unsigned(acc_6) + unsigned(sext_ln67_6_fu_978_p1));
    add_ln67_25_fu_962_p2 <= std_logic_vector(signed(sext_ln69_14_fu_890_p1) + signed(sext_ln67_26_fu_958_p1));
    add_ln67_26_fu_1010_p2 <= std_logic_vector(signed(sext_ln67_27_fu_1007_p1) + signed(sext_ln69_6_fu_984_p1));
    add_ln67_28_fu_1032_p2 <= std_logic_vector(unsigned(acc_7) + unsigned(sext_ln67_7_fu_981_p1));
    add_ln67_29_fu_972_p2 <= std_logic_vector(signed(sext_ln69_15_fu_894_p1) + signed(sext_ln67_29_fu_968_p1));
    add_ln67_2_fu_678_p2 <= std_logic_vector(signed(sext_ln67_9_fu_675_p1) + signed(sext_ln69_fu_632_p1));
    add_ln67_30_fu_1040_p2 <= std_logic_vector(signed(sext_ln67_30_fu_1037_p1) + signed(sext_ln69_7_fu_993_p1));
    add_ln67_4_fu_700_p2 <= std_logic_vector(unsigned(acc_1) + unsigned(sext_ln67_1_fu_600_p1));
    add_ln67_5_fu_590_p2 <= std_logic_vector(signed(sext_ln69_9_fu_566_p1) + signed(sext_ln67_11_fu_586_p1));
    add_ln67_6_fu_708_p2 <= std_logic_vector(signed(sext_ln67_12_fu_705_p1) + signed(sext_ln69_1_fu_636_p1));
    add_ln67_8_fu_774_p2 <= std_logic_vector(unsigned(acc_2) + unsigned(sext_ln67_2_fu_750_p1));
    add_ln67_9_fu_734_p2 <= std_logic_vector(signed(sext_ln69_10_fu_650_p1) + signed(sext_ln67_14_fu_730_p1));
    add_ln67_fu_670_p2 <= std_logic_vector(unsigned(acc_0) + unsigned(sext_ln67_fu_596_p1));
    add_ln69_10_fu_640_p2 <= std_logic_vector(signed(reg_432) + signed(add_ln69_2_reg_1187));
    add_ln69_11_fu_645_p2 <= std_logic_vector(signed(reg_437) + signed(add_ln69_3_reg_1195));
    add_ln69_12_fu_864_p2 <= std_logic_vector(signed(reg_442) + signed(add_ln69_4_reg_1255));
    add_ln69_13_fu_873_p2 <= std_logic_vector(signed(reg_446) + signed(add_ln69_5_reg_1263));
    add_ln69_14_fu_988_p2 <= std_logic_vector(signed(reg_450) + signed(add_ln69_6_reg_1355));
    add_ln69_15_fu_997_p2 <= std_logic_vector(signed(reg_454) + signed(add_ln69_7_reg_1363));
    add_ln69_16_fu_560_p2 <= std_logic_vector(signed(reg_442) + signed(add_ln69_8_fu_546_p2));
    add_ln69_17_fu_570_p2 <= std_logic_vector(signed(reg_446) + signed(add_ln69_9_fu_551_p2));
    add_ln69_18_fu_654_p2 <= std_logic_vector(signed(reg_450) + signed(add_ln69_10_fu_640_p2));
    add_ln69_19_fu_664_p2 <= std_logic_vector(signed(reg_454) + signed(add_ln69_11_fu_645_p2));
    add_ln69_1_fu_481_p2 <= std_logic_vector(signed(reg_407) + signed(trunc_ln67_1_fu_477_p1));
    add_ln69_20_fu_878_p2 <= std_logic_vector(signed(reg_402) + signed(add_ln69_12_fu_864_p2));
    add_ln69_21_fu_884_p2 <= std_logic_vector(signed(reg_407) + signed(add_ln69_13_fu_873_p2));
    add_ln69_22_fu_1062_p2 <= std_logic_vector(signed(reg_412) + signed(add_ln69_14_reg_1482));
    add_ln69_23_fu_1067_p2 <= std_logic_vector(signed(reg_417) + signed(add_ln69_15_reg_1488));
    add_ln69_24_fu_1072_p2 <= std_logic_vector(signed(d_i_0_load_6_reg_1322) + signed(add_ln69_16_reg_1300));
    add_ln69_25_fu_1076_p2 <= std_logic_vector(signed(d_i_1_load_6_reg_1332) + signed(add_ln69_17_reg_1306));
    add_ln69_26_fu_1080_p2 <= std_logic_vector(signed(d_i_2_load_6_reg_1400) + signed(add_ln69_18_reg_1378));
    add_ln69_27_fu_1084_p2 <= std_logic_vector(signed(d_i_3_load_6_reg_1410) + signed(add_ln69_19_reg_1384));
    add_ln69_28_fu_1088_p2 <= std_logic_vector(signed(reg_422) + signed(add_ln69_20_reg_1460));
    add_ln69_29_fu_1093_p2 <= std_logic_vector(signed(reg_427) + signed(add_ln69_21_reg_1466));
    add_ln69_2_fu_496_p2 <= std_logic_vector(signed(reg_412) + signed(trunc_ln67_2_fu_492_p1));
    add_ln69_30_fu_1098_p2 <= std_logic_vector(signed(reg_432) + signed(add_ln69_22_reg_1494));
    add_ln69_31_fu_1103_p2 <= std_logic_vector(signed(reg_437) + signed(add_ln69_23_reg_1500));
    add_ln69_3_fu_511_p2 <= std_logic_vector(signed(reg_417) + signed(trunc_ln67_3_fu_507_p1));
    add_ln69_4_fu_526_p2 <= std_logic_vector(signed(d_i_0_load_1_reg_1200) + signed(trunc_ln67_4_fu_522_p1));
    add_ln69_5_fu_540_p2 <= std_logic_vector(signed(d_i_1_load_1_reg_1206) + signed(trunc_ln67_5_fu_536_p1));
    add_ln69_6_fu_612_p2 <= std_logic_vector(signed(d_i_2_load_1_reg_1268) + signed(trunc_ln67_6_fu_608_p1));
    add_ln69_7_fu_626_p2 <= std_logic_vector(signed(d_i_3_load_1_reg_1274) + signed(trunc_ln67_7_fu_622_p1));
    add_ln69_8_fu_546_p2 <= std_logic_vector(signed(reg_422) + signed(add_ln69_reg_1141));
    add_ln69_9_fu_551_p2 <= std_logic_vector(signed(reg_427) + signed(add_ln69_1_reg_1149));
    add_ln69_fu_466_p2 <= std_logic_vector(signed(reg_402) + signed(trunc_ln67_fu_462_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_ST_fsm_state10_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state11_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state12_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state15_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state17_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state18_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state18_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state18_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
        if (((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state10_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state10 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state11_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state11 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state12 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state13_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state13 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state14_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state14 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state15_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state15 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state16_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state16 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state17_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state17 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state18_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state18 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state3 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state4 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state5 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state6 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state7 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state8 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(d_o_0_full_n, d_o_1_full_n)
    begin
                ap_block_state9 <= ((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state18)
    begin
        if ((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    d_i_0_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_0_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_0_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_0_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_0_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            d_i_0_address0 <= "XXX";
        end if; 
    end process;


    d_i_0_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_0_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_0_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_0_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_0_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            d_i_0_address1 <= "XXX";
        end if; 
    end process;


    d_i_0_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_0_ce0 <= ap_const_logic_1;
        else 
            d_i_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_0_ce1_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_0_ce1 <= ap_const_logic_1;
        else 
            d_i_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_1_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_1_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_1_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_1_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            d_i_1_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            d_i_1_address0 <= "XXX";
        end if; 
    end process;


    d_i_1_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_1_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_1_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_1_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_1_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            d_i_1_address1 <= "XXX";
        end if; 
    end process;


    d_i_1_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_1_ce0 <= ap_const_logic_1;
        else 
            d_i_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_1_ce1_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_1_ce1 <= ap_const_logic_1;
        else 
            d_i_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_2_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_2_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_2_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_2_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            d_i_2_address0 <= "XXX";
        end if; 
    end process;


    d_i_2_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_2_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_2_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_2_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_2_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            d_i_2_address1 <= "XXX";
        end if; 
    end process;


    d_i_2_ce0_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_2_ce0 <= ap_const_logic_1;
        else 
            d_i_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_2_ce1_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_2_ce1 <= ap_const_logic_1;
        else 
            d_i_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_3_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_3_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_3_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            d_i_3_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            d_i_3_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            d_i_3_address0 <= "XXX";
        end if; 
    end process;


    d_i_3_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            d_i_3_address1 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            d_i_3_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            d_i_3_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            d_i_3_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            d_i_3_address1 <= "XXX";
        end if; 
    end process;


    d_i_3_ce0_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_3_ce0 <= ap_const_logic_1;
        else 
            d_i_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    d_i_3_ce1_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_i_3_ce1 <= ap_const_logic_1;
        else 
            d_i_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    d_o_0_blk_n_assign_proc : process(d_o_0_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            d_o_0_blk_n <= d_o_0_full_n;
        else 
            d_o_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_0_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_fu_466_p2, add_ln69_2_fu_496_p2, add_ln69_4_fu_526_p2, add_ln69_8_reg_1280, add_ln69_16_reg_1300, add_ln69_6_fu_612_p2, add_ln69_10_reg_1368, add_ln69_18_reg_1378, add_ln69_12_reg_1450, add_ln69_20_reg_1460, add_ln69_14_reg_1482, add_ln69_22_reg_1494, add_ln69_24_reg_1506, add_ln69_26_reg_1516, add_ln69_28_reg_1526, add_ln69_30_reg_1536)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_0_din <= add_ln69_30_reg_1536;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_0_din <= add_ln69_28_reg_1526;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_0_din <= add_ln69_26_reg_1516;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_0_din <= add_ln69_24_reg_1506;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_0_din <= add_ln69_22_reg_1494;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_0_din <= add_ln69_20_reg_1460;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_0_din <= add_ln69_18_reg_1378;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_0_din <= add_ln69_16_reg_1300;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_0_din <= add_ln69_14_reg_1482;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_0_din <= add_ln69_12_reg_1450;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_0_din <= add_ln69_10_reg_1368;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_0_din <= add_ln69_8_reg_1280;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_0_din <= add_ln69_6_fu_612_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_0_din <= add_ln69_4_fu_526_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_0_din <= add_ln69_2_fu_496_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_0_din <= add_ln69_fu_466_p2;
            else 
                d_o_0_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_0_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_0_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_o_0_write <= ap_const_logic_1;
        else 
            d_o_0_write <= ap_const_logic_0;
        end if; 
    end process;


    d_o_1_blk_n_assign_proc : process(d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            d_o_1_blk_n <= d_o_1_full_n;
        else 
            d_o_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    d_o_1_din_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, add_ln69_1_fu_481_p2, add_ln69_3_fu_511_p2, add_ln69_5_fu_540_p2, add_ln69_9_reg_1285, add_ln69_17_reg_1306, add_ln69_7_fu_626_p2, add_ln69_11_reg_1373, add_ln69_19_reg_1384, add_ln69_13_reg_1455, add_ln69_21_reg_1466, add_ln69_15_reg_1488, add_ln69_23_reg_1500, add_ln69_25_reg_1511, add_ln69_27_reg_1521, add_ln69_29_reg_1531, add_ln69_31_reg_1541)
    begin
        if (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0)))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                d_o_1_din <= add_ln69_31_reg_1541;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                d_o_1_din <= add_ln69_29_reg_1531;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                d_o_1_din <= add_ln69_27_reg_1521;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                d_o_1_din <= add_ln69_25_reg_1511;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                d_o_1_din <= add_ln69_23_reg_1500;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_o_1_din <= add_ln69_21_reg_1466;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                d_o_1_din <= add_ln69_19_reg_1384;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                d_o_1_din <= add_ln69_17_reg_1306;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_o_1_din <= add_ln69_15_reg_1488;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                d_o_1_din <= add_ln69_13_reg_1455;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                d_o_1_din <= add_ln69_11_reg_1373;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                d_o_1_din <= add_ln69_9_reg_1285;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                d_o_1_din <= add_ln69_7_fu_626_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                d_o_1_din <= add_ln69_5_fu_540_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                d_o_1_din <= add_ln69_3_fu_511_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                d_o_1_din <= add_ln69_1_fu_481_p2;
            else 
                d_o_1_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            d_o_1_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    d_o_1_write_assign_proc : process(d_o_0_full_n, d_o_1_full_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state16)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state15)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state14)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state10)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)) or (not(((d_o_1_full_n = ap_const_logic_0) or (d_o_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            d_o_1_write <= ap_const_logic_1;
        else 
            d_o_1_write <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln67_10_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_2_fu_678_p2),32));

    sext_ln67_11_fu_586_p0 <= d_i_1_q1;
        sext_ln67_11_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_11_fu_586_p0),17));

        sext_ln67_12_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_5_reg_1337),18));

        sext_ln67_13_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_6_fu_708_p2),32));

    sext_ln67_14_fu_730_p0 <= d_i_2_q1;
        sext_ln67_14_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_14_fu_730_p0),17));

        sext_ln67_15_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_9_reg_1405),18));

        sext_ln67_16_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_10_fu_782_p2),32));

    sext_ln67_17_fu_740_p0 <= d_i_3_q1;
        sext_ln67_17_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_17_fu_740_p0),17));

        sext_ln67_18_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_13_reg_1415),18));

        sext_ln67_19_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_14_fu_812_p2),32));

        sext_ln67_1_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_407),32));

    sext_ln67_20_fu_834_p0 <= d_i_0_q1;
        sext_ln67_20_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_20_fu_834_p0),17));

        sext_ln67_21_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_17_reg_1430),18));

        sext_ln67_22_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_18_fu_906_p2),32));

    sext_ln67_23_fu_844_p0 <= d_i_1_q1;
        sext_ln67_23_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_23_fu_844_p0),17));

        sext_ln67_24_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_21_reg_1435),18));

        sext_ln67_25_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_22_fu_936_p2),32));

    sext_ln67_26_fu_958_p0 <= d_i_2_q1;
        sext_ln67_26_fu_958_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_26_fu_958_p0),17));

        sext_ln67_27_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_25_reg_1472),18));

        sext_ln67_28_fu_1016_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_26_fu_1010_p2),32));

    sext_ln67_29_fu_968_p0 <= d_i_3_q1;
        sext_ln67_29_fu_968_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_29_fu_968_p0),17));

        sext_ln67_2_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_412),32));

        sext_ln67_30_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_29_reg_1477),18));

        sext_ln67_31_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_30_fu_1040_p2),32));

        sext_ln67_3_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_417),32));

        sext_ln67_4_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_load_1_reg_1200),32));

        sext_ln67_5_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_load_1_reg_1206),32));

        sext_ln67_6_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_2_load_1_reg_1268),32));

        sext_ln67_7_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_3_load_1_reg_1274),32));

    sext_ln67_8_fu_576_p0 <= d_i_0_q1;
        sext_ln67_8_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln67_8_fu_576_p0),17));

        sext_ln67_9_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln67_1_reg_1327),18));

        sext_ln67_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_402),32));

        sext_ln69_10_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_450),17));

        sext_ln69_11_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_454),17));

        sext_ln69_12_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_402),17));

        sext_ln69_13_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_407),17));

        sext_ln69_14_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_412),17));

        sext_ln69_15_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_417),17));

        sext_ln69_1_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_427),18));

        sext_ln69_2_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_432),18));

        sext_ln69_3_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_437),18));

        sext_ln69_4_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_442),18));

        sext_ln69_5_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_446),18));

        sext_ln69_6_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_450),18));

        sext_ln69_7_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_454),18));

        sext_ln69_8_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_442),17));

        sext_ln69_9_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_446),17));

        sext_ln69_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(reg_422),18));

    temp_1_fu_718_p2 <= std_logic_vector(signed(sext_ln67_13_fu_714_p1) + signed(add_ln67_4_fu_700_p2));
    temp_2_fu_792_p2 <= std_logic_vector(signed(sext_ln67_16_fu_788_p1) + signed(add_ln67_8_fu_774_p2));
    temp_3_fu_822_p2 <= std_logic_vector(signed(sext_ln67_19_fu_818_p1) + signed(add_ln67_12_fu_804_p2));
    temp_4_fu_916_p2 <= std_logic_vector(signed(sext_ln67_22_fu_912_p1) + signed(add_ln67_16_fu_898_p2));
    temp_5_fu_946_p2 <= std_logic_vector(signed(sext_ln67_25_fu_942_p1) + signed(add_ln67_20_fu_928_p2));
    temp_6_fu_1020_p2 <= std_logic_vector(signed(sext_ln67_28_fu_1016_p1) + signed(add_ln67_24_fu_1002_p2));
    temp_7_fu_1050_p2 <= std_logic_vector(signed(sext_ln67_31_fu_1046_p1) + signed(add_ln67_28_fu_1032_p2));
    temp_fu_688_p2 <= std_logic_vector(signed(sext_ln67_10_fu_684_p1) + signed(add_ln67_fu_670_p2));
    trunc_ln67_1_fu_477_p1 <= acc_1(16 - 1 downto 0);
    trunc_ln67_2_fu_492_p1 <= acc_2(16 - 1 downto 0);
    trunc_ln67_3_fu_507_p1 <= acc_3(16 - 1 downto 0);
    trunc_ln67_4_fu_522_p1 <= acc_4(16 - 1 downto 0);
    trunc_ln67_5_fu_536_p1 <= acc_5(16 - 1 downto 0);
    trunc_ln67_6_fu_608_p1 <= acc_6(16 - 1 downto 0);
    trunc_ln67_7_fu_622_p1 <= acc_7(16 - 1 downto 0);
    trunc_ln67_fu_462_p1 <= acc_0(16 - 1 downto 0);
end behav;
