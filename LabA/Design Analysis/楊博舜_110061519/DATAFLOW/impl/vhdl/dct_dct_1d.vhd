-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read2 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read3 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read4 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read5 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read6 : IN STD_LOGIC_VECTOR (15 downto 0);
    p_read7 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv29_1000 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv29_25A1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010010110100001";
    constant ap_const_lv29_1FFFD39E : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101001110011110";
    constant ap_const_lv29_8D4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100011010100";
    constant ap_const_lv29_1924 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001100100100100";
    constant ap_const_lv29_29CF : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010100111001111";
    constant ap_const_lv29_2C63 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010110001100011";
    constant ap_const_lv29_1FFFDA60 : STD_LOGIC_VECTOR (28 downto 0) := "11111111111111101101001100000";
    constant ap_const_lv29_1151 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000101010001";

attribute shreg_extract : string;
    signal p_read727_reg_751 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_read727_reg_751_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read626_reg_759 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read626_reg_759_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read525_reg_767 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read424_reg_775 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read323_reg_783 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read222_reg_789 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read121_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_64_reg_801 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read_64_reg_801_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_9_fu_96_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_9_reg_808 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_9_reg_808_pp0_iter1_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_12_fu_100_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_12_reg_814 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_12_reg_814_pp0_iter1_reg : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_14_fu_104_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_fu_108_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln32_reg_826 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln_reg_831 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_831_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_831_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_831_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp15_cast15_fu_226_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp20_fu_240_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp20_fu_240_p2 : signal is "no";
    signal tmp20_reg_842 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp27_cast_fu_268_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_13_fu_272_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp33_fu_275_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp33_reg_859 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln34_4_reg_864 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_4_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_4_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_4_reg_864_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_15_fu_339_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp48_fu_352_p2 : STD_LOGIC_VECTOR (17 downto 0);
    attribute use_dsp48 of tmp48_fu_352_p2 : signal is "no";
    signal tmp48_reg_875 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_8_fu_364_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_10_fu_367_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_11_fu_370_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp33_cast17_fu_373_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_16_fu_381_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_525_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_531_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_543_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_549_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_565_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_573_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_579_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_589_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_603_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_619_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_611_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_9_fu_96_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln32_12_fu_100_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln32_14_fu_104_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_fu_156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_152_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1019_fu_160_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_111_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp6517_fu_180_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_174_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal shl_ln_fu_145_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln32_fu_192_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp5_fu_184_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_5_fu_198_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp4_fu_166_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_fu_204_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln32_2_fu_121_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln32_5_fu_136_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp15_fu_220_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln32_1_fu_118_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp19_fu_230_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp19_cast_fu_236_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_4_fu_133_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_3_fu_124_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_fu_246_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp25_cast_fu_252_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln22_fu_127_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp26_fu_256_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_7_fu_142_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp27_fu_262_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln22_2_fu_139_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp35_fu_281_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal empty_29_fu_291_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp35_cast_fu_287_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl1_fu_295_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp36_fu_303_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_shl_fu_309_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_6_fu_317_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_4_fu_323_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp47_fu_342_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp47_cast_fu_348_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln32_6_fu_361_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp43_fu_376_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln34_12_fu_385_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_643_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_634_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_12_fu_385_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_12_fu_385_p2 : signal is "no";
    signal add_ln34_1_fu_389_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_625_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_1_fu_389_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_1_fu_389_p2 : signal is "no";
    signal trunc_ln34_2_fu_404_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_652_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_18_fu_413_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_671_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_680_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_18_fu_413_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_18_fu_413_p2 : signal is "no";
    signal add_ln34_3_fu_417_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_662_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_3_fu_417_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_3_fu_417_p2 : signal is "no";
    signal add_ln34_23_fu_432_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_706_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_697_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_23_fu_432_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_23_fu_432_p2 : signal is "no";
    signal add_ln34_5_fu_436_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_689_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_5_fu_436_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_5_fu_436_p2 : signal is "no";
    signal trunc_ln34_6_fu_451_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_715_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_29_fu_460_p0 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_742_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_29_fu_460_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_29_fu_460_p2 : signal is "no";
    signal add_ln34_7_fu_464_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_725_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln34_7_fu_464_p2 : STD_LOGIC_VECTOR (28 downto 0);
    attribute use_dsp48 of add_ln34_7_fu_464_p2 : signal is "no";
    signal grp_fu_525_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_531_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_537_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_537_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_543_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_543_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_549_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_549_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln22_1_fu_130_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_549_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_559_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_565_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_565_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_565_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_573_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_573_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_579_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_589_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_603_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_603_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_619_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_619_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_625_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_625_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_634_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_634_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_643_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_643_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_643_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln22_3_fu_358_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_662_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_671_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_671_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_671_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_680_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_680_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_689_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_689_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_697_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_697_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_706_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_706_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_715_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_715_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_725_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_725_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_733_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_733_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_742_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_525_ce : STD_LOGIC;
    signal grp_fu_531_ce : STD_LOGIC;
    signal grp_fu_537_ce : STD_LOGIC;
    signal grp_fu_543_ce : STD_LOGIC;
    signal grp_fu_549_ce : STD_LOGIC;
    signal grp_fu_559_ce : STD_LOGIC;
    signal grp_fu_565_ce : STD_LOGIC;
    signal grp_fu_573_ce : STD_LOGIC;
    signal grp_fu_579_ce : STD_LOGIC;
    signal grp_fu_589_ce : STD_LOGIC;
    signal grp_fu_597_ce : STD_LOGIC;
    signal grp_fu_603_ce : STD_LOGIC;
    signal grp_fu_611_ce : STD_LOGIC;
    signal grp_fu_619_ce : STD_LOGIC;
    signal grp_fu_625_ce : STD_LOGIC;
    signal grp_fu_634_ce : STD_LOGIC;
    signal grp_fu_643_ce : STD_LOGIC;
    signal grp_fu_652_ce : STD_LOGIC;
    signal grp_fu_662_ce : STD_LOGIC;
    signal grp_fu_671_ce : STD_LOGIC;
    signal grp_fu_680_ce : STD_LOGIC;
    signal grp_fu_689_ce : STD_LOGIC;
    signal grp_fu_697_ce : STD_LOGIC;
    signal grp_fu_706_ce : STD_LOGIC;
    signal grp_fu_715_ce : STD_LOGIC;
    signal grp_fu_725_ce : STD_LOGIC;
    signal grp_fu_733_ce : STD_LOGIC;
    signal grp_fu_742_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal p_read_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read4_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read5_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read6_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal p_read7_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_4_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_5_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_6_int_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_return_7_int_reg : STD_LOGIC_VECTOR (15 downto 0);

    component dct_mul_mul_16s_14ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_16s_15s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_12ns_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (11 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_17s_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_14ns_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_16s_16s_13ns_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mul_mul_17s_12ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_18s_13ns_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_14ns_29ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_16s_15s_29ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_13ns_29s_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (28 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component dct_mac_muladd_17s_12ns_13ns_29_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;



begin
    mul_mul_16s_14ns_29_4_0_U71 : component dct_mul_mul_16s_14ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read1_int_reg,
        din1 => grp_fu_525_p1,
        ce => grp_fu_525_ce,
        dout => grp_fu_525_p2);

    mul_mul_16s_15s_29_4_0_U72 : component dct_mul_mul_16s_15s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_read2_int_reg,
        din1 => grp_fu_531_p1,
        ce => grp_fu_531_ce,
        dout => grp_fu_531_p2);

    mul_mul_16s_14ns_29_4_0_U73 : component dct_mul_mul_16s_14ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_537_p0,
        din1 => grp_fu_537_p1,
        ce => grp_fu_537_ce,
        dout => grp_fu_537_p2);

    mul_mul_16s_15s_29_4_0_U74 : component dct_mul_mul_16s_15s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_543_p0,
        din1 => grp_fu_543_p1,
        ce => grp_fu_543_ce,
        dout => grp_fu_543_p2);

    ama_submuladd_16s_16s_12ns_29s_29_4_0_U75 : component dct_ama_submuladd_16s_16s_12ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 12,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_549_p0,
        din1 => grp_fu_549_p1,
        din2 => grp_fu_549_p2,
        din3 => grp_fu_525_p2,
        ce => grp_fu_549_ce,
        dout => grp_fu_549_p4);

    mul_mul_17s_13ns_29_4_0_U76 : component dct_mul_mul_17s_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_559_p0,
        din1 => grp_fu_559_p1,
        ce => grp_fu_559_ce,
        dout => grp_fu_559_p2);

    mac_muladd_18s_14ns_13ns_29_4_0_U77 : component dct_mac_muladd_18s_14ns_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_565_p0,
        din1 => grp_fu_565_p1,
        din2 => grp_fu_565_p2,
        ce => grp_fu_565_ce,
        dout => grp_fu_565_p3);

    mul_mul_16s_14ns_29_4_0_U78 : component dct_mul_mul_16s_14ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_573_p0,
        din1 => grp_fu_573_p1,
        ce => grp_fu_573_ce,
        dout => grp_fu_573_p2);

    ama_submuladd_16s_16s_13ns_29s_29_4_0_U79 : component dct_ama_submuladd_16s_16s_13ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_579_p0,
        din1 => grp_fu_579_p1,
        din2 => grp_fu_579_p2,
        din3 => grp_fu_531_p2,
        ce => grp_fu_579_ce,
        dout => grp_fu_579_p4);

    mac_muladd_16s_15s_29s_29_4_0_U80 : component dct_mac_muladd_16s_15s_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_589_p0,
        din1 => grp_fu_589_p1,
        din2 => grp_fu_537_p2,
        ce => grp_fu_589_ce,
        dout => grp_fu_589_p3);

    mul_mul_17s_12ns_29_4_0_U81 : component dct_mul_mul_17s_12ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        ce => grp_fu_597_ce,
        dout => grp_fu_597_p2);

    mac_muladd_18s_13ns_13ns_29_4_0_U82 : component dct_mac_muladd_18s_13ns_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_603_p0,
        din1 => grp_fu_603_p1,
        din2 => grp_fu_603_p2,
        ce => grp_fu_603_ce,
        dout => grp_fu_603_p3);

    mac_muladd_16s_14ns_29s_29_4_0_U83 : component dct_mac_muladd_16s_14ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        din2 => grp_fu_543_p2,
        ce => grp_fu_611_ce,
        dout => grp_fu_611_p3);

    mul_mul_16s_15s_29_4_0_U84 : component dct_mul_mul_16s_15s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_619_p0,
        din1 => grp_fu_619_p1,
        ce => grp_fu_619_ce,
        dout => grp_fu_619_p2);

    mac_muladd_16s_14ns_29ns_29_4_0_U85 : component dct_mac_muladd_16s_14ns_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_625_p0,
        din1 => grp_fu_625_p1,
        din2 => grp_fu_549_p4,
        ce => grp_fu_625_ce,
        dout => grp_fu_625_p3);

    mac_muladd_16s_15s_29s_29_4_0_U86 : component dct_mac_muladd_16s_15s_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_634_p0,
        din1 => grp_fu_634_p1,
        din2 => grp_fu_559_p2,
        ce => grp_fu_634_ce,
        dout => grp_fu_634_p3);

    mac_muladd_16s_15s_13ns_29_4_0_U87 : component dct_mac_muladd_16s_15s_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_643_p0,
        din1 => grp_fu_643_p1,
        din2 => grp_fu_643_p2,
        ce => grp_fu_643_ce,
        dout => grp_fu_643_p3);

    ama_addmuladd_18s_16s_13ns_29ns_29_4_0_U88 : component dct_ama_addmuladd_18s_16s_13ns_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 13,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp20_reg_842,
        din1 => grp_fu_652_p1,
        din2 => grp_fu_652_p2,
        din3 => grp_fu_565_p3,
        ce => grp_fu_652_ce,
        dout => grp_fu_652_p4);

    mac_muladd_16s_14ns_29ns_29_4_0_U89 : component dct_mac_muladd_16s_14ns_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_662_p0,
        din1 => grp_fu_662_p1,
        din2 => grp_fu_579_p4,
        ce => grp_fu_662_ce,
        dout => grp_fu_662_p3);

    mac_muladd_16s_15s_13ns_29_4_0_U90 : component dct_mac_muladd_16s_15s_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_671_p0,
        din1 => grp_fu_671_p1,
        din2 => grp_fu_671_p2,
        ce => grp_fu_671_ce,
        dout => grp_fu_671_p3);

    mac_muladd_17s_12ns_29s_29_4_0_U91 : component dct_mac_muladd_17s_12ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_680_p0,
        din1 => grp_fu_680_p1,
        din2 => grp_fu_573_p2,
        ce => grp_fu_680_ce,
        dout => grp_fu_680_p3);

    mac_muladd_16s_15s_29ns_29_4_0_U92 : component dct_mac_muladd_16s_15s_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_689_p0,
        din1 => grp_fu_689_p1,
        din2 => grp_fu_589_p3,
        ce => grp_fu_689_ce,
        dout => grp_fu_689_p3);

    mac_muladd_16s_14ns_29s_29_4_0_U93 : component dct_mac_muladd_16s_14ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_697_p0,
        din1 => grp_fu_697_p1,
        din2 => grp_fu_597_p2,
        ce => grp_fu_697_ce,
        dout => grp_fu_697_p3);

    mac_muladd_17s_13ns_13ns_29_4_0_U94 : component dct_mac_muladd_17s_13ns_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_706_p0,
        din1 => grp_fu_706_p1,
        din2 => grp_fu_706_p2,
        ce => grp_fu_706_ce,
        dout => grp_fu_706_p3);

    ama_submuladd_18s_16s_14ns_29ns_29_4_0_U95 : component dct_ama_submuladd_18s_16s_14ns_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        din2_WIDTH => 14,
        din3_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp48_reg_875,
        din1 => grp_fu_715_p1,
        din2 => grp_fu_715_p2,
        din3 => grp_fu_603_p3,
        ce => grp_fu_715_ce,
        dout => grp_fu_715_p4);

    mac_muladd_16s_14ns_29ns_29_4_0_U96 : component dct_mac_muladd_16s_14ns_29ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 14,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_725_p0,
        din1 => grp_fu_725_p1,
        din2 => grp_fu_611_p3,
        ce => grp_fu_725_ce,
        dout => grp_fu_725_p3);

    mac_muladd_17s_13ns_29s_29_4_0_U97 : component dct_mac_muladd_17s_13ns_29s_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 13,
        din2_WIDTH => 29,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_733_p0,
        din1 => grp_fu_733_p1,
        din2 => grp_fu_619_p2,
        ce => grp_fu_733_ce,
        dout => grp_fu_733_p3);

    mac_muladd_17s_12ns_13ns_29_4_0_U98 : component dct_mac_muladd_17s_12ns_13ns_29_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 17,
        din1_WIDTH => 12,
        din2_WIDTH => 13,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_742_p0,
        din1 => grp_fu_742_p1,
        din2 => grp_fu_742_p2,
        ce => grp_fu_742_ce,
        dout => grp_fu_742_p3);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= trunc_ln_reg_831_pp0_iter4_reg;
                ap_return_1_int_reg <= add_ln34_1_fu_389_p2(28 downto 13);
                ap_return_2_int_reg <= trunc_ln34_2_fu_404_p1(28 downto 13);
                ap_return_3_int_reg <= add_ln34_3_fu_417_p2(28 downto 13);
                ap_return_4_int_reg <= trunc_ln34_4_reg_864_pp0_iter4_reg;
                ap_return_5_int_reg <= add_ln34_5_fu_436_p2(28 downto 13);
                ap_return_6_int_reg <= trunc_ln34_6_fu_451_p1(28 downto 13);
                ap_return_7_int_reg <= add_ln34_7_fu_464_p2(28 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                p_read121_reg_795 <= p_read1_int_reg;
                p_read222_reg_789 <= p_read2_int_reg;
                p_read323_reg_783 <= p_read3_int_reg;
                p_read424_reg_775 <= p_read4_int_reg;
                p_read525_reg_767 <= p_read5_int_reg;
                p_read626_reg_759 <= p_read6_int_reg;
                p_read626_reg_759_pp0_iter1_reg <= p_read626_reg_759;
                p_read727_reg_751 <= p_read7_int_reg;
                p_read727_reg_751_pp0_iter1_reg <= p_read727_reg_751;
                p_read_64_reg_801 <= p_read_int_reg;
                p_read_64_reg_801_pp0_iter1_reg <= p_read_64_reg_801;
                sext_ln32_12_reg_814 <= sext_ln32_12_fu_100_p1;
                sext_ln32_12_reg_814_pp0_iter1_reg <= sext_ln32_12_reg_814;
                sext_ln32_9_reg_808 <= sext_ln32_9_fu_96_p1;
                sext_ln32_9_reg_808_pp0_iter1_reg <= sext_ln32_9_reg_808;
                sext_ln32_reg_826 <= sext_ln32_fu_108_p1;
                tmp20_reg_842 <= tmp20_fu_240_p2;
                tmp33_reg_859 <= tmp33_fu_275_p2;
                tmp48_reg_875 <= tmp48_fu_352_p2;
                trunc_ln34_4_reg_864 <= add_ln34_4_fu_323_p2(28 downto 13);
                trunc_ln34_4_reg_864_pp0_iter2_reg <= trunc_ln34_4_reg_864;
                trunc_ln34_4_reg_864_pp0_iter3_reg <= trunc_ln34_4_reg_864_pp0_iter2_reg;
                trunc_ln34_4_reg_864_pp0_iter4_reg <= trunc_ln34_4_reg_864_pp0_iter3_reg;
                trunc_ln_reg_831 <= add_ln34_fu_204_p2(28 downto 13);
                trunc_ln_reg_831_pp0_iter2_reg <= trunc_ln_reg_831;
                trunc_ln_reg_831_pp0_iter3_reg <= trunc_ln_reg_831_pp0_iter2_reg;
                trunc_ln_reg_831_pp0_iter4_reg <= trunc_ln_reg_831_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                p_read1_int_reg <= p_read1;
                p_read2_int_reg <= p_read2;
                p_read3_int_reg <= p_read3;
                p_read4_int_reg <= p_read4;
                p_read5_int_reg <= p_read5;
                p_read6_int_reg <= p_read6;
                p_read7_int_reg <= p_read7;
                p_read_int_reg <= p_read;
            end if;
        end if;
    end process;
    add_ln32_fu_192_p2 <= std_logic_vector(unsigned(tmp_4_fu_174_p2) + unsigned(shl_ln_fu_145_p3));
    add_ln34_12_fu_385_p0 <= grp_fu_643_p3;
    add_ln34_12_fu_385_p2 <= std_logic_vector(signed(add_ln34_12_fu_385_p0) + signed(grp_fu_634_p3));
    add_ln34_18_fu_413_p0 <= grp_fu_671_p3;
    add_ln34_18_fu_413_p2 <= std_logic_vector(signed(add_ln34_18_fu_413_p0) + signed(grp_fu_680_p3));
    add_ln34_1_fu_389_p1 <= grp_fu_625_p3;
    add_ln34_1_fu_389_p2 <= std_logic_vector(unsigned(add_ln34_12_fu_385_p2) + unsigned(add_ln34_1_fu_389_p1));
    add_ln34_23_fu_432_p0 <= grp_fu_706_p3;
    add_ln34_23_fu_432_p2 <= std_logic_vector(signed(add_ln34_23_fu_432_p0) + signed(grp_fu_697_p3));
    add_ln34_29_fu_460_p0 <= grp_fu_742_p3;
    add_ln34_29_fu_460_p2 <= std_logic_vector(signed(add_ln34_29_fu_460_p0) + signed(grp_fu_733_p3));
    add_ln34_3_fu_417_p1 <= grp_fu_662_p3;
    add_ln34_3_fu_417_p2 <= std_logic_vector(unsigned(add_ln34_18_fu_413_p2) + unsigned(add_ln34_3_fu_417_p1));
    add_ln34_4_fu_323_p2 <= std_logic_vector(unsigned(tmp_6_fu_317_p2) + unsigned(tmp_5_fu_198_p2));
    add_ln34_5_fu_436_p1 <= grp_fu_689_p3;
    add_ln34_5_fu_436_p2 <= std_logic_vector(unsigned(add_ln34_23_fu_432_p2) + unsigned(add_ln34_5_fu_436_p1));
    add_ln34_7_fu_464_p1 <= grp_fu_725_p3;
    add_ln34_7_fu_464_p2 <= std_logic_vector(unsigned(add_ln34_29_fu_460_p2) + unsigned(add_ln34_7_fu_464_p1));
    add_ln34_fu_204_p2 <= std_logic_vector(unsigned(tmp_5_fu_198_p2) + unsigned(tmp4_fu_166_p3));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(trunc_ln_reg_831_pp0_iter4_reg, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= trunc_ln_reg_831_pp0_iter4_reg;
        else 
            ap_return_0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_1_assign_proc : process(add_ln34_1_fu_389_p2, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= add_ln34_1_fu_389_p2(28 downto 13);
        else 
            ap_return_1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_2_assign_proc : process(trunc_ln34_2_fu_404_p1, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= trunc_ln34_2_fu_404_p1(28 downto 13);
        else 
            ap_return_2 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_3_assign_proc : process(add_ln34_3_fu_417_p2, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= add_ln34_3_fu_417_p2(28 downto 13);
        else 
            ap_return_3 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_4_assign_proc : process(trunc_ln34_4_reg_864_pp0_iter4_reg, ap_ce_reg, ap_return_4_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_4 <= ap_return_4_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_4 <= trunc_ln34_4_reg_864_pp0_iter4_reg;
        else 
            ap_return_4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_5_assign_proc : process(add_ln34_5_fu_436_p2, ap_ce_reg, ap_return_5_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_5 <= ap_return_5_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_5 <= add_ln34_5_fu_436_p2(28 downto 13);
        else 
            ap_return_5 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_6_assign_proc : process(trunc_ln34_6_fu_451_p1, ap_ce_reg, ap_return_6_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_6 <= ap_return_6_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_6 <= trunc_ln34_6_fu_451_p1(28 downto 13);
        else 
            ap_return_6 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_return_7_assign_proc : process(add_ln34_7_fu_464_p2, ap_ce_reg, ap_return_7_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_7 <= ap_return_7_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_7 <= add_ln34_7_fu_464_p2(28 downto 13);
        else 
            ap_return_7 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    empty_29_fu_291_p1 <= tmp35_fu_281_p2(16 - 1 downto 0);
    empty_fu_152_p2 <= std_logic_vector(signed(p_read222_reg_789) + signed(p_read121_reg_795));

    grp_fu_525_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_525_ce <= ap_const_logic_1;
        else 
            grp_fu_525_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_525_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);

    grp_fu_531_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_531_ce <= ap_const_logic_1;
        else 
            grp_fu_531_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_531_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);

    grp_fu_537_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_537_ce <= ap_const_logic_1;
        else 
            grp_fu_537_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_537_p0 <= sext_ln32_14_fu_104_p1(16 - 1 downto 0);
    grp_fu_537_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);

    grp_fu_543_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_543_ce <= ap_const_logic_1;
        else 
            grp_fu_543_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_543_p0 <= sext_ln32_14_fu_104_p1(16 - 1 downto 0);
    grp_fu_543_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);

    grp_fu_549_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_549_ce <= ap_const_logic_1;
        else 
            grp_fu_549_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_549_p0 <= sext_ln32_3_fu_124_p1(16 - 1 downto 0);
    grp_fu_549_p1 <= sext_ln22_1_fu_130_p1(16 - 1 downto 0);
    grp_fu_549_p2 <= ap_const_lv29_8D4(12 - 1 downto 0);

    grp_fu_559_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_559_ce <= ap_const_logic_1;
        else 
            grp_fu_559_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_559_p0 <= tmp15_cast15_fu_226_p1(17 - 1 downto 0);
    grp_fu_559_p1 <= ap_const_lv29_1924(13 - 1 downto 0);

    grp_fu_565_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_565_ce <= ap_const_logic_1;
        else 
            grp_fu_565_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_565_p0 <= tmp27_cast_fu_268_p1(18 - 1 downto 0);
    grp_fu_565_p1 <= ap_const_lv29_29CF(14 - 1 downto 0);
    grp_fu_565_p2 <= ap_const_lv29_1000(13 - 1 downto 0);

    grp_fu_573_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_573_ce <= ap_const_logic_1;
        else 
            grp_fu_573_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_573_p0 <= sext_ln32_13_fu_272_p1(16 - 1 downto 0);
    grp_fu_573_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);

    grp_fu_579_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_579_ce <= ap_const_logic_1;
        else 
            grp_fu_579_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_579_p0 <= sext_ln22_1_fu_130_p1(16 - 1 downto 0);
    grp_fu_579_p1 <= sext_ln32_3_fu_124_p1(16 - 1 downto 0);
    grp_fu_579_p2 <= ap_const_lv29_1924(13 - 1 downto 0);

    grp_fu_589_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_589_ce <= ap_const_logic_1;
        else 
            grp_fu_589_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_589_p0 <= sext_ln32_15_fu_339_p1(16 - 1 downto 0);
    grp_fu_589_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);

    grp_fu_597_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_597_ce <= ap_const_logic_1;
        else 
            grp_fu_597_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_597_p0 <= tmp15_cast15_fu_226_p1(17 - 1 downto 0);
    grp_fu_597_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);

    grp_fu_603_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_603_ce <= ap_const_logic_1;
        else 
            grp_fu_603_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_603_p0 <= tmp27_cast_fu_268_p1(18 - 1 downto 0);
    grp_fu_603_p1 <= ap_const_lv29_1151(13 - 1 downto 0);
    grp_fu_603_p2 <= ap_const_lv29_1000(13 - 1 downto 0);

    grp_fu_611_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_611_ce <= ap_const_logic_1;
        else 
            grp_fu_611_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_611_p0 <= sext_ln32_15_fu_339_p1(16 - 1 downto 0);
    grp_fu_611_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);

    grp_fu_619_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_619_ce <= ap_const_logic_1;
        else 
            grp_fu_619_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_619_p0 <= sext_ln32_13_fu_272_p1(16 - 1 downto 0);
    grp_fu_619_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);

    grp_fu_625_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_625_ce <= ap_const_logic_1;
        else 
            grp_fu_625_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_625_p0 <= sext_ln32_8_fu_364_p1(16 - 1 downto 0);
    grp_fu_625_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);

    grp_fu_634_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_634_ce <= ap_const_logic_1;
        else 
            grp_fu_634_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_634_p0 <= sext_ln32_10_fu_367_p1(16 - 1 downto 0);
    grp_fu_634_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);

    grp_fu_643_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_643_ce <= ap_const_logic_1;
        else 
            grp_fu_643_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_643_p0 <= sext_ln32_11_fu_370_p1(16 - 1 downto 0);
    grp_fu_643_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);
    grp_fu_643_p2 <= ap_const_lv29_1000(13 - 1 downto 0);

    grp_fu_652_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_652_ce <= ap_const_logic_1;
        else 
            grp_fu_652_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_652_p1 <= sext_ln22_3_fu_358_p1(16 - 1 downto 0);
    grp_fu_652_p2 <= ap_const_lv29_1151(13 - 1 downto 0);

    grp_fu_662_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_662_ce <= ap_const_logic_1;
        else 
            grp_fu_662_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_662_p0 <= sext_ln32_8_fu_364_p1(16 - 1 downto 0);
    grp_fu_662_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);

    grp_fu_671_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_671_ce <= ap_const_logic_1;
        else 
            grp_fu_671_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_671_p0 <= sext_ln32_11_fu_370_p1(16 - 1 downto 0);
    grp_fu_671_p1 <= ap_const_lv29_1FFFDA60(15 - 1 downto 0);
    grp_fu_671_p2 <= ap_const_lv29_1000(13 - 1 downto 0);

    grp_fu_680_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_680_ce <= ap_const_logic_1;
        else 
            grp_fu_680_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_680_p0 <= tmp33_cast17_fu_373_p1(17 - 1 downto 0);
    grp_fu_680_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);

    grp_fu_689_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_689_ce <= ap_const_logic_1;
        else 
            grp_fu_689_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_689_p0 <= sext_ln32_9_reg_808_pp0_iter1_reg(16 - 1 downto 0);
    grp_fu_689_p1 <= ap_const_lv29_1FFFD39E(15 - 1 downto 0);

    grp_fu_697_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_697_ce <= ap_const_logic_1;
        else 
            grp_fu_697_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_697_p0 <= sext_ln32_10_fu_367_p1(16 - 1 downto 0);
    grp_fu_697_p1 <= ap_const_lv29_2C63(14 - 1 downto 0);

    grp_fu_706_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_706_ce <= ap_const_logic_1;
        else 
            grp_fu_706_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_706_p0 <= sext_ln32_16_fu_381_p1(17 - 1 downto 0);
    grp_fu_706_p1 <= ap_const_lv29_1924(13 - 1 downto 0);
    grp_fu_706_p2 <= ap_const_lv29_1000(13 - 1 downto 0);

    grp_fu_715_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_715_ce <= ap_const_logic_1;
        else 
            grp_fu_715_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_715_p1 <= sext_ln22_3_fu_358_p1(16 - 1 downto 0);
    grp_fu_715_p2 <= ap_const_lv29_29CF(14 - 1 downto 0);

    grp_fu_725_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_725_ce <= ap_const_logic_1;
        else 
            grp_fu_725_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_725_p0 <= sext_ln32_12_reg_814_pp0_iter1_reg(16 - 1 downto 0);
    grp_fu_725_p1 <= ap_const_lv29_25A1(14 - 1 downto 0);

    grp_fu_733_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_733_ce <= ap_const_logic_1;
        else 
            grp_fu_733_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_733_p0 <= tmp33_cast17_fu_373_p1(17 - 1 downto 0);
    grp_fu_733_p1 <= ap_const_lv29_1924(13 - 1 downto 0);

    grp_fu_742_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_742_ce <= ap_const_logic_1;
        else 
            grp_fu_742_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_742_p0 <= sext_ln32_16_fu_381_p1(17 - 1 downto 0);
    grp_fu_742_p1 <= ap_const_lv29_8D4(12 - 1 downto 0);
    grp_fu_742_p2 <= ap_const_lv29_1000(13 - 1 downto 0);
    p_shl1_fu_295_p3 <= (empty_29_fu_291_p1 & ap_const_lv13_0);
    p_shl_fu_309_p3 <= (empty_fu_152_p2 & ap_const_lv13_0);
        sext_ln22_1_fu_130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read424_reg_775),17));

        sext_ln22_2_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read626_reg_759),17));

        sext_ln22_3_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read626_reg_759_pp0_iter1_reg),18));

        sext_ln22_fu_127_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read424_reg_775),18));

        sext_ln32_10_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read626_reg_759_pp0_iter1_reg),29));

        sext_ln32_11_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read727_reg_751_pp0_iter1_reg),29));

    sext_ln32_12_fu_100_p0 <= p_read2_int_reg;
        sext_ln32_12_fu_100_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln32_12_fu_100_p0),29));

        sext_ln32_13_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read525_reg_767),29));

    sext_ln32_14_fu_104_p0 <= p_read3_int_reg;
        sext_ln32_14_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln32_14_fu_104_p0),29));

        sext_ln32_15_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read424_reg_775),29));

        sext_ln32_16_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp43_fu_376_p2),29));

        sext_ln32_1_fu_118_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read121_reg_795),17));

        sext_ln32_2_fu_121_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read222_reg_789),17));

        sext_ln32_3_fu_124_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read323_reg_783),17));

        sext_ln32_4_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read525_reg_767),18));

        sext_ln32_5_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read525_reg_767),17));

        sext_ln32_6_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read727_reg_751_pp0_iter1_reg),17));

        sext_ln32_7_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read727_reg_751),18));

        sext_ln32_8_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_64_reg_801_pp0_iter1_reg),29));

    sext_ln32_9_fu_96_p0 <= p_read1_int_reg;
        sext_ln32_9_fu_96_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln32_9_fu_96_p0),29));

        sext_ln32_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_read_64_reg_801),17));

    shl_ln_fu_145_p3 <= (p_read727_reg_751 & ap_const_lv13_0);
    tmp1019_fu_160_p2 <= std_logic_vector(unsigned(tmp2_fu_156_p2) + unsigned(empty_fu_152_p2));
        tmp15_cast15_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp15_fu_220_p2),29));

    tmp15_fu_220_p2 <= std_logic_vector(signed(sext_ln32_2_fu_121_p1) - signed(sext_ln32_5_fu_136_p1));
        tmp19_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp19_fu_230_p2),18));

    tmp19_fu_230_p2 <= std_logic_vector(signed(sext_ln32_1_fu_118_p1) - signed(sext_ln32_2_fu_121_p1));
    tmp20_fu_240_p2 <= std_logic_vector(signed(tmp19_cast_fu_236_p1) - signed(sext_ln32_4_fu_133_p1));
        tmp25_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp25_fu_246_p2),18));

    tmp25_fu_246_p2 <= std_logic_vector(signed(sext_ln32_fu_108_p1) - signed(sext_ln32_3_fu_124_p1));
    tmp26_fu_256_p2 <= std_logic_vector(signed(tmp25_cast_fu_252_p1) - signed(sext_ln22_fu_127_p1));
        tmp27_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp27_fu_262_p2),29));

    tmp27_fu_262_p2 <= std_logic_vector(unsigned(tmp26_fu_256_p2) + unsigned(sext_ln32_7_fu_142_p1));
    tmp2_fu_156_p2 <= std_logic_vector(signed(p_read525_reg_767) + signed(p_read626_reg_759));
        tmp33_cast17_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp33_reg_859),29));

    tmp33_fu_275_p2 <= std_logic_vector(signed(sext_ln22_2_fu_139_p1) - signed(sext_ln32_1_fu_118_p1));
        tmp35_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp35_fu_281_p2),29));

    tmp35_fu_281_p2 <= std_logic_vector(signed(sext_ln22_2_fu_139_p1) + signed(sext_ln32_5_fu_136_p1));
    tmp36_fu_303_p2 <= std_logic_vector(signed(tmp35_cast_fu_287_p1) - signed(p_shl1_fu_295_p3));
    tmp43_fu_376_p2 <= std_logic_vector(signed(sext_ln32_reg_826) - signed(sext_ln32_6_fu_361_p1));
        tmp47_cast_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp47_fu_342_p2),18));

    tmp47_fu_342_p2 <= std_logic_vector(signed(sext_ln32_2_fu_121_p1) - signed(sext_ln32_1_fu_118_p1));
    tmp48_fu_352_p2 <= std_logic_vector(signed(tmp47_cast_fu_348_p1) + signed(sext_ln32_4_fu_133_p1));
    tmp4_fu_166_p3 <= (tmp1019_fu_160_p2 & ap_const_lv13_0);
    tmp5_fu_184_p3 <= (tmp6517_fu_180_p2 & ap_const_lv13_0);
    tmp6517_fu_180_p2 <= std_logic_vector(signed(p_read424_reg_775) + signed(p_read323_reg_783));
    tmp_4_fu_174_p2 <= (tmp_fu_111_p3 or ap_const_lv29_1000);
    tmp_5_fu_198_p2 <= std_logic_vector(unsigned(add_ln32_fu_192_p2) + unsigned(tmp5_fu_184_p3));
    tmp_6_fu_317_p2 <= std_logic_vector(unsigned(tmp36_fu_303_p2) - unsigned(p_shl_fu_309_p3));
    tmp_fu_111_p3 <= (p_read_64_reg_801 & ap_const_lv13_0);
    trunc_ln34_2_fu_404_p1 <= grp_fu_652_p4;
    trunc_ln34_6_fu_451_p1 <= grp_fu_715_p4;
end behav;
