// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_write_data_Pipeline_WR_Loop_Row (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        sext_ln87,
        buf_read,
        buf_read_71,
        buf_read_79,
        buf_read_87,
        buf_read_95,
        buf_read_103,
        buf_read_111,
        buf_read_119,
        buf_read_64,
        buf_read_72,
        buf_read_80,
        buf_read_88,
        buf_read_96,
        buf_read_104,
        buf_read_112,
        buf_read_120,
        buf_read_65,
        buf_read_73,
        buf_read_81,
        buf_read_89,
        buf_read_97,
        buf_read_105,
        buf_read_113,
        buf_read_121,
        buf_read_66,
        buf_read_74,
        buf_read_82,
        buf_read_90,
        buf_read_98,
        buf_read_106,
        buf_read_114,
        buf_read_122,
        buf_read_67,
        buf_read_75,
        buf_read_83,
        buf_read_91,
        buf_read_99,
        buf_read_107,
        buf_read_115,
        buf_read_123,
        buf_read_68,
        buf_read_76,
        buf_read_84,
        buf_read_92,
        buf_read_100,
        buf_read_108,
        buf_read_116,
        buf_read_124,
        buf_read_69,
        buf_read_77,
        buf_read_85,
        buf_read_93,
        buf_read_101,
        buf_read_109,
        buf_read_117,
        buf_read_125,
        buf_read_70,
        buf_read_78,
        buf_read_86,
        buf_read_94,
        buf_read_102,
        buf_read_110,
        buf_read_118,
        buf_read_126
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [511:0] m_axi_gmem_WDATA;
output  [63:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [511:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [57:0] sext_ln87;
input  [15:0] buf_read;
input  [15:0] buf_read_71;
input  [15:0] buf_read_79;
input  [15:0] buf_read_87;
input  [15:0] buf_read_95;
input  [15:0] buf_read_103;
input  [15:0] buf_read_111;
input  [15:0] buf_read_119;
input  [15:0] buf_read_64;
input  [15:0] buf_read_72;
input  [15:0] buf_read_80;
input  [15:0] buf_read_88;
input  [15:0] buf_read_96;
input  [15:0] buf_read_104;
input  [15:0] buf_read_112;
input  [15:0] buf_read_120;
input  [15:0] buf_read_65;
input  [15:0] buf_read_73;
input  [15:0] buf_read_81;
input  [15:0] buf_read_89;
input  [15:0] buf_read_97;
input  [15:0] buf_read_105;
input  [15:0] buf_read_113;
input  [15:0] buf_read_121;
input  [15:0] buf_read_66;
input  [15:0] buf_read_74;
input  [15:0] buf_read_82;
input  [15:0] buf_read_90;
input  [15:0] buf_read_98;
input  [15:0] buf_read_106;
input  [15:0] buf_read_114;
input  [15:0] buf_read_122;
input  [15:0] buf_read_67;
input  [15:0] buf_read_75;
input  [15:0] buf_read_83;
input  [15:0] buf_read_91;
input  [15:0] buf_read_99;
input  [15:0] buf_read_107;
input  [15:0] buf_read_115;
input  [15:0] buf_read_123;
input  [15:0] buf_read_68;
input  [15:0] buf_read_76;
input  [15:0] buf_read_84;
input  [15:0] buf_read_92;
input  [15:0] buf_read_100;
input  [15:0] buf_read_108;
input  [15:0] buf_read_116;
input  [15:0] buf_read_124;
input  [15:0] buf_read_69;
input  [15:0] buf_read_77;
input  [15:0] buf_read_85;
input  [15:0] buf_read_93;
input  [15:0] buf_read_101;
input  [15:0] buf_read_109;
input  [15:0] buf_read_117;
input  [15:0] buf_read_125;
input  [15:0] buf_read_70;
input  [15:0] buf_read_78;
input  [15:0] buf_read_86;
input  [15:0] buf_read_94;
input  [15:0] buf_read_102;
input  [15:0] buf_read_110;
input  [15:0] buf_read_118;
input  [15:0] buf_read_126;

reg ap_idle;
reg m_axi_gmem_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg   [0:0] icmp_ln87_1_reg_954;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln87_fu_623_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_blk_n_W;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] tmp_8_fu_639_p10;
reg   [15:0] tmp_8_reg_906;
wire   [15:0] tmp_8_1_fu_661_p10;
reg   [15:0] tmp_8_1_reg_912;
wire   [15:0] tmp_8_2_fu_683_p10;
reg   [15:0] tmp_8_2_reg_918;
wire   [15:0] tmp_8_3_fu_705_p10;
reg   [15:0] tmp_8_3_reg_924;
wire   [15:0] tmp_8_4_fu_727_p10;
reg   [15:0] tmp_8_4_reg_930;
wire   [15:0] tmp_8_5_fu_749_p10;
reg   [15:0] tmp_8_5_reg_936;
wire   [15:0] tmp_8_6_fu_771_p10;
reg   [15:0] tmp_8_6_reg_942;
wire   [15:0] tmp_8_7_fu_793_p10;
reg   [15:0] tmp_8_7_reg_948;
wire   [0:0] icmp_ln87_1_fu_815_p2;
wire    ap_block_pp0_stage0_01001;
reg   [383:0] phi_ln87_fu_194;
wire   [383:0] select_ln87_fu_871_p3;
wire    ap_loop_init;
reg   [3:0] r_fu_198;
wire   [3:0] add_ln87_fu_629_p2;
reg   [3:0] ap_sig_allocacmp_r_1;
wire   [1:0] empty_25_fu_635_p1;
wire   [255:0] tmp_fu_847_p4;
wire   [383:0] tmp_1_fu_857_p10;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U191(
    .din0(buf_read),
    .din1(buf_read_71),
    .din2(buf_read_79),
    .din3(buf_read_87),
    .din4(buf_read_95),
    .din5(buf_read_103),
    .din6(buf_read_111),
    .din7(buf_read_119),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_fu_639_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U192(
    .din0(buf_read_64),
    .din1(buf_read_72),
    .din2(buf_read_80),
    .din3(buf_read_88),
    .din4(buf_read_96),
    .din5(buf_read_104),
    .din6(buf_read_112),
    .din7(buf_read_120),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_1_fu_661_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U193(
    .din0(buf_read_65),
    .din1(buf_read_73),
    .din2(buf_read_81),
    .din3(buf_read_89),
    .din4(buf_read_97),
    .din5(buf_read_105),
    .din6(buf_read_113),
    .din7(buf_read_121),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_2_fu_683_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U194(
    .din0(buf_read_66),
    .din1(buf_read_74),
    .din2(buf_read_82),
    .din3(buf_read_90),
    .din4(buf_read_98),
    .din5(buf_read_106),
    .din6(buf_read_114),
    .din7(buf_read_122),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_3_fu_705_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U195(
    .din0(buf_read_67),
    .din1(buf_read_75),
    .din2(buf_read_83),
    .din3(buf_read_91),
    .din4(buf_read_99),
    .din5(buf_read_107),
    .din6(buf_read_115),
    .din7(buf_read_123),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_4_fu_727_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U196(
    .din0(buf_read_68),
    .din1(buf_read_76),
    .din2(buf_read_84),
    .din3(buf_read_92),
    .din4(buf_read_100),
    .din5(buf_read_108),
    .din6(buf_read_116),
    .din7(buf_read_124),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_5_fu_749_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U197(
    .din0(buf_read_69),
    .din1(buf_read_77),
    .din2(buf_read_85),
    .din3(buf_read_93),
    .din4(buf_read_101),
    .din5(buf_read_109),
    .din6(buf_read_117),
    .din7(buf_read_125),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_6_fu_771_p10)
);

dct_mux_84_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_84_16_1_1_U198(
    .din0(buf_read_70),
    .din1(buf_read_78),
    .din2(buf_read_86),
    .din3(buf_read_94),
    .din4(buf_read_102),
    .din5(buf_read_110),
    .din6(buf_read_118),
    .din7(buf_read_126),
    .din8(ap_sig_allocacmp_r_1),
    .dout(tmp_8_7_fu_793_p10)
);

dct_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            phi_ln87_fu_194 <= 384'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            phi_ln87_fu_194 <= select_ln87_fu_871_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln87_fu_623_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            r_fu_198 <= add_ln87_fu_629_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            r_fu_198 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_623_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln87_1_reg_954 <= icmp_ln87_1_fu_815_p2;
        tmp_8_1_reg_912 <= tmp_8_1_fu_661_p10;
        tmp_8_2_reg_918 <= tmp_8_2_fu_683_p10;
        tmp_8_3_reg_924 <= tmp_8_3_fu_705_p10;
        tmp_8_4_reg_930 <= tmp_8_4_fu_727_p10;
        tmp_8_5_reg_936 <= tmp_8_5_fu_749_p10;
        tmp_8_6_reg_942 <= tmp_8_6_fu_771_p10;
        tmp_8_7_reg_948 <= tmp_8_7_fu_793_p10;
        tmp_8_reg_906 <= tmp_8_fu_639_p10;
    end
end

always @ (*) begin
    if (((icmp_ln87_fu_623_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_r_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_r_1 = r_fu_198;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln87_1_reg_954 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln87_1_reg_954 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln87_fu_629_p2 = (ap_sig_allocacmp_r_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io = ((icmp_ln87_1_reg_954 == 1'd1) & (m_axi_gmem_WREADY == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_25_fu_635_p1 = ap_sig_allocacmp_r_1[1:0];

assign icmp_ln87_1_fu_815_p2 = ((empty_25_fu_635_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_623_p2 = ((ap_sig_allocacmp_r_1 == 4'd8) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = 64'd0;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd0;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_ARVALID = 1'b0;

assign m_axi_gmem_AWADDR = 64'd0;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_AWVALID = 1'b0;

assign m_axi_gmem_BREADY = 1'b0;

assign m_axi_gmem_RREADY = 1'b0;

assign m_axi_gmem_WDATA = {{{{{{{{{tmp_8_7_reg_948}, {tmp_8_6_reg_942}}, {tmp_8_5_reg_936}}, {tmp_8_4_reg_930}}, {tmp_8_3_reg_924}}, {tmp_8_2_reg_918}}, {tmp_8_1_reg_912}}, {tmp_8_reg_906}}, {phi_ln87_fu_194}};

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 64'd18446744073709551615;

assign m_axi_gmem_WUSER = 1'd0;

assign select_ln87_fu_871_p3 = ((icmp_ln87_1_reg_954[0:0] == 1'b1) ? 384'd0 : tmp_1_fu_857_p10);

assign tmp_1_fu_857_p10 = {{{{{{{{{tmp_8_7_reg_948}, {tmp_8_6_reg_942}}, {tmp_8_5_reg_936}}, {tmp_8_4_reg_930}}, {tmp_8_3_reg_924}}, {tmp_8_2_reg_918}}, {tmp_8_1_reg_912}}, {tmp_8_reg_906}}, {tmp_fu_847_p4}};

assign tmp_fu_847_p4 = {{phi_ln87_fu_194[383:128]}};

endmodule //dct_write_data_Pipeline_WR_Loop_Row
