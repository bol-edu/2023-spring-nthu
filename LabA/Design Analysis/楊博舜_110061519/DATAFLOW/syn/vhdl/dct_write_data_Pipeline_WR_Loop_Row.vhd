-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_write_data_Pipeline_WR_Loop_Row is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln87 : IN STD_LOGIC_VECTOR (57 downto 0);
    buf_read : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_71 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_79 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_87 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_95 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_103 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_111 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_119 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_64 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_72 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_80 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_88 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_96 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_104 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_112 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_120 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_65 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_73 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_81 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_89 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_97 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_105 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_113 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_121 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_66 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_74 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_82 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_90 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_98 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_106 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_114 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_122 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_67 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_75 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_83 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_91 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_99 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_107 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_115 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_123 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_68 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_76 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_84 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_92 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_100 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_108 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_116 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_124 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_69 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_77 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_85 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_93 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_101 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_109 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_117 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_125 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_70 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_78 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_86 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_94 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_102 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_110 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_118 : IN STD_LOGIC_VECTOR (15 downto 0);
    buf_read_126 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct_write_data_Pipeline_WR_Loop_Row is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv384_lc_1 : STD_LOGIC_VECTOR (383 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln87_1_reg_954 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln87_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_8_fu_639_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_906 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_fu_661_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_1_reg_912 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_fu_683_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_2_reg_918 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_3_fu_705_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_3_reg_924 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_4_fu_727_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_4_reg_930 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_5_fu_749_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_5_reg_936 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_6_fu_771_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_6_reg_942 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_7_fu_793_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_7_reg_948 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln87_1_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal phi_ln87_fu_194 : STD_LOGIC_VECTOR (383 downto 0);
    signal select_ln87_fu_871_p3 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_198 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln87_fu_629_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_r_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_25_fu_635_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_847_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_1_fu_857_p10 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_mux_84_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_84_16_1_1_U191 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read,
        din1 => buf_read_71,
        din2 => buf_read_79,
        din3 => buf_read_87,
        din4 => buf_read_95,
        din5 => buf_read_103,
        din6 => buf_read_111,
        din7 => buf_read_119,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_fu_639_p10);

    mux_84_16_1_1_U192 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_64,
        din1 => buf_read_72,
        din2 => buf_read_80,
        din3 => buf_read_88,
        din4 => buf_read_96,
        din5 => buf_read_104,
        din6 => buf_read_112,
        din7 => buf_read_120,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_1_fu_661_p10);

    mux_84_16_1_1_U193 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_65,
        din1 => buf_read_73,
        din2 => buf_read_81,
        din3 => buf_read_89,
        din4 => buf_read_97,
        din5 => buf_read_105,
        din6 => buf_read_113,
        din7 => buf_read_121,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_2_fu_683_p10);

    mux_84_16_1_1_U194 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_66,
        din1 => buf_read_74,
        din2 => buf_read_82,
        din3 => buf_read_90,
        din4 => buf_read_98,
        din5 => buf_read_106,
        din6 => buf_read_114,
        din7 => buf_read_122,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_3_fu_705_p10);

    mux_84_16_1_1_U195 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_67,
        din1 => buf_read_75,
        din2 => buf_read_83,
        din3 => buf_read_91,
        din4 => buf_read_99,
        din5 => buf_read_107,
        din6 => buf_read_115,
        din7 => buf_read_123,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_4_fu_727_p10);

    mux_84_16_1_1_U196 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_68,
        din1 => buf_read_76,
        din2 => buf_read_84,
        din3 => buf_read_92,
        din4 => buf_read_100,
        din5 => buf_read_108,
        din6 => buf_read_116,
        din7 => buf_read_124,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_5_fu_749_p10);

    mux_84_16_1_1_U197 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_69,
        din1 => buf_read_77,
        din2 => buf_read_85,
        din3 => buf_read_93,
        din4 => buf_read_101,
        din5 => buf_read_109,
        din6 => buf_read_117,
        din7 => buf_read_125,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_6_fu_771_p10);

    mux_84_16_1_1_U198 : component dct_mux_84_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 4,
        dout_WIDTH => 16)
    port map (
        din0 => buf_read_70,
        din1 => buf_read_78,
        din2 => buf_read_86,
        din3 => buf_read_94,
        din4 => buf_read_102,
        din5 => buf_read_110,
        din6 => buf_read_118,
        din7 => buf_read_126,
        din8 => ap_sig_allocacmp_r_1,
        dout => tmp_8_7_fu_793_p10);

    flow_control_loop_pipe_sequential_init_U : component dct_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    phi_ln87_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    phi_ln87_fu_194 <= ap_const_lv384_lc_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    phi_ln87_fu_194 <= select_ln87_fu_871_p3;
                end if;
            end if; 
        end if;
    end process;

    r_fu_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln87_fu_623_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    r_fu_198 <= add_ln87_fu_629_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_198 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_623_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln87_1_reg_954 <= icmp_ln87_1_fu_815_p2;
                tmp_8_1_reg_912 <= tmp_8_1_fu_661_p10;
                tmp_8_2_reg_918 <= tmp_8_2_fu_683_p10;
                tmp_8_3_reg_924 <= tmp_8_3_fu_705_p10;
                tmp_8_4_reg_930 <= tmp_8_4_fu_727_p10;
                tmp_8_5_reg_936 <= tmp_8_5_fu_749_p10;
                tmp_8_6_reg_942 <= tmp_8_6_fu_771_p10;
                tmp_8_7_reg_948 <= tmp_8_7_fu_793_p10;
                tmp_8_reg_906 <= tmp_8_fu_639_p10;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln87_fu_629_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_r_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln87_1_reg_954)
    begin
                ap_block_state2_io <= ((icmp_ln87_1_reg_954 = ap_const_lv1_1) and (m_axi_gmem_WREADY = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln87_fu_623_p2)
    begin
        if (((icmp_ln87_fu_623_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_r_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, r_fu_198)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_r_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_r_1 <= r_fu_198;
        end if; 
    end process;

    empty_25_fu_635_p1 <= ap_sig_allocacmp_r_1(2 - 1 downto 0);

    gmem_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_gmem_WREADY, icmp_ln87_1_reg_954, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln87_1_reg_954 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln87_1_fu_815_p2 <= "1" when (empty_25_fu_635_p1 = ap_const_lv2_3) else "0";
    icmp_ln87_fu_623_p2 <= "1" when (ap_sig_allocacmp_r_1 = ap_const_lv4_8) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= ((((((((tmp_8_7_reg_948 & tmp_8_6_reg_942) & tmp_8_5_reg_936) & tmp_8_4_reg_930) & tmp_8_3_reg_924) & tmp_8_2_reg_918) & tmp_8_1_reg_912) & tmp_8_reg_906) & phi_ln87_fu_194);
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv64_FFFFFFFFFFFFFFFF;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln87_1_reg_954, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln87_1_reg_954 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    select_ln87_fu_871_p3 <= 
        ap_const_lv384_lc_1 when (icmp_ln87_1_reg_954(0) = '1') else 
        tmp_1_fu_857_p10;
    tmp_1_fu_857_p10 <= ((((((((tmp_8_7_reg_948 & tmp_8_6_reg_942) & tmp_8_5_reg_936) & tmp_8_4_reg_930) & tmp_8_3_reg_924) & tmp_8_2_reg_918) & tmp_8_1_reg_912) & tmp_8_reg_906) & tmp_fu_847_p4);
    tmp_fu_847_p4 <= phi_ln87_fu_194(383 downto 128);
end behav;
