// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dct_dct,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=423,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=0,HLS_SYN_FF=932,HLS_SYN_LUT=2032,HLS_VERSION=2022_1}" *)

module dct (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
output  [5:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] buf_2d_in_address0;
reg    buf_2d_in_ce0;
reg    buf_2d_in_we0;
wire   [15:0] buf_2d_in_q0;
reg    buf_2d_in_ce1;
wire   [15:0] buf_2d_in_q1;
reg    buf_2d_in_ce2;
wire   [15:0] buf_2d_in_q2;
reg    buf_2d_in_ce3;
wire   [15:0] buf_2d_in_q3;
reg    buf_2d_in_ce4;
wire   [15:0] buf_2d_in_q4;
reg    buf_2d_in_ce5;
wire   [15:0] buf_2d_in_q5;
reg    buf_2d_in_ce6;
wire   [15:0] buf_2d_in_q6;
reg    buf_2d_in_ce7;
wire   [15:0] buf_2d_in_q7;
reg   [5:0] buf_2d_out_address0;
reg    buf_2d_out_ce0;
reg    buf_2d_out_we0;
wire   [15:0] buf_2d_out_q0;
wire    grp_read_data_fu_52_ap_start;
wire    grp_read_data_fu_52_ap_done;
wire    grp_read_data_fu_52_ap_idle;
wire    grp_read_data_fu_52_ap_ready;
wire   [5:0] grp_read_data_fu_52_input_r_address0;
wire    grp_read_data_fu_52_input_r_ce0;
wire   [5:0] grp_read_data_fu_52_buf_r_address0;
wire    grp_read_data_fu_52_buf_r_ce0;
wire    grp_read_data_fu_52_buf_r_we0;
wire   [15:0] grp_read_data_fu_52_buf_r_d0;
wire    grp_dct_2d_fu_60_ap_start;
wire    grp_dct_2d_fu_60_ap_done;
wire    grp_dct_2d_fu_60_ap_idle;
wire    grp_dct_2d_fu_60_ap_ready;
wire   [5:0] grp_dct_2d_fu_60_in_block_address0;
wire    grp_dct_2d_fu_60_in_block_ce0;
wire   [5:0] grp_dct_2d_fu_60_in_block_address1;
wire    grp_dct_2d_fu_60_in_block_ce1;
wire   [5:0] grp_dct_2d_fu_60_in_block_address2;
wire    grp_dct_2d_fu_60_in_block_ce2;
wire   [5:0] grp_dct_2d_fu_60_in_block_address3;
wire    grp_dct_2d_fu_60_in_block_ce3;
wire   [5:0] grp_dct_2d_fu_60_in_block_address4;
wire    grp_dct_2d_fu_60_in_block_ce4;
wire   [5:0] grp_dct_2d_fu_60_in_block_address5;
wire    grp_dct_2d_fu_60_in_block_ce5;
wire   [5:0] grp_dct_2d_fu_60_in_block_address6;
wire    grp_dct_2d_fu_60_in_block_ce6;
wire   [5:0] grp_dct_2d_fu_60_in_block_address7;
wire    grp_dct_2d_fu_60_in_block_ce7;
wire   [5:0] grp_dct_2d_fu_60_out_block_address0;
wire    grp_dct_2d_fu_60_out_block_ce0;
wire    grp_dct_2d_fu_60_out_block_we0;
wire   [15:0] grp_dct_2d_fu_60_out_block_d0;
wire    grp_write_data_fu_82_ap_start;
wire    grp_write_data_fu_82_ap_done;
wire    grp_write_data_fu_82_ap_idle;
wire    grp_write_data_fu_82_ap_ready;
wire   [5:0] grp_write_data_fu_82_buf_r_address0;
wire    grp_write_data_fu_82_buf_r_ce0;
wire   [5:0] grp_write_data_fu_82_output_r_address0;
wire    grp_write_data_fu_82_output_r_ce0;
wire    grp_write_data_fu_82_output_r_we0;
wire   [15:0] grp_write_data_fu_82_output_r_d0;
reg    grp_read_data_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_dct_2d_fu_60_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_write_data_fu_82_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_read_data_fu_52_ap_start_reg = 1'b0;
#0 grp_dct_2d_fu_60_ap_start_reg = 1'b0;
#0 grp_write_data_fu_82_ap_start_reg = 1'b0;
end

dct_buf_2d_in_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buf_2d_in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_2d_in_address0),
    .ce0(buf_2d_in_ce0),
    .we0(buf_2d_in_we0),
    .d0(grp_read_data_fu_52_buf_r_d0),
    .q0(buf_2d_in_q0),
    .address1(grp_dct_2d_fu_60_in_block_address1),
    .ce1(buf_2d_in_ce1),
    .q1(buf_2d_in_q1),
    .address2(grp_dct_2d_fu_60_in_block_address2),
    .ce2(buf_2d_in_ce2),
    .q2(buf_2d_in_q2),
    .address3(grp_dct_2d_fu_60_in_block_address3),
    .ce3(buf_2d_in_ce3),
    .q3(buf_2d_in_q3),
    .address4(grp_dct_2d_fu_60_in_block_address4),
    .ce4(buf_2d_in_ce4),
    .q4(buf_2d_in_q4),
    .address5(grp_dct_2d_fu_60_in_block_address5),
    .ce5(buf_2d_in_ce5),
    .q5(buf_2d_in_q5),
    .address6(grp_dct_2d_fu_60_in_block_address6),
    .ce6(buf_2d_in_ce6),
    .q6(buf_2d_in_q6),
    .address7(grp_dct_2d_fu_60_in_block_address7),
    .ce7(buf_2d_in_ce7),
    .q7(buf_2d_in_q7)
);

dct_buf_2d_out_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
buf_2d_out_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_2d_out_address0),
    .ce0(buf_2d_out_ce0),
    .we0(buf_2d_out_we0),
    .d0(grp_dct_2d_fu_60_out_block_d0),
    .q0(buf_2d_out_q0)
);

dct_read_data grp_read_data_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_read_data_fu_52_ap_start),
    .ap_done(grp_read_data_fu_52_ap_done),
    .ap_idle(grp_read_data_fu_52_ap_idle),
    .ap_ready(grp_read_data_fu_52_ap_ready),
    .input_r_address0(grp_read_data_fu_52_input_r_address0),
    .input_r_ce0(grp_read_data_fu_52_input_r_ce0),
    .input_r_q0(input_r_q0),
    .buf_r_address0(grp_read_data_fu_52_buf_r_address0),
    .buf_r_ce0(grp_read_data_fu_52_buf_r_ce0),
    .buf_r_we0(grp_read_data_fu_52_buf_r_we0),
    .buf_r_d0(grp_read_data_fu_52_buf_r_d0)
);

dct_dct_2d grp_dct_2d_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dct_2d_fu_60_ap_start),
    .ap_done(grp_dct_2d_fu_60_ap_done),
    .ap_idle(grp_dct_2d_fu_60_ap_idle),
    .ap_ready(grp_dct_2d_fu_60_ap_ready),
    .in_block_address0(grp_dct_2d_fu_60_in_block_address0),
    .in_block_ce0(grp_dct_2d_fu_60_in_block_ce0),
    .in_block_q0(buf_2d_in_q0),
    .in_block_address1(grp_dct_2d_fu_60_in_block_address1),
    .in_block_ce1(grp_dct_2d_fu_60_in_block_ce1),
    .in_block_q1(buf_2d_in_q1),
    .in_block_address2(grp_dct_2d_fu_60_in_block_address2),
    .in_block_ce2(grp_dct_2d_fu_60_in_block_ce2),
    .in_block_q2(buf_2d_in_q2),
    .in_block_address3(grp_dct_2d_fu_60_in_block_address3),
    .in_block_ce3(grp_dct_2d_fu_60_in_block_ce3),
    .in_block_q3(buf_2d_in_q3),
    .in_block_address4(grp_dct_2d_fu_60_in_block_address4),
    .in_block_ce4(grp_dct_2d_fu_60_in_block_ce4),
    .in_block_q4(buf_2d_in_q4),
    .in_block_address5(grp_dct_2d_fu_60_in_block_address5),
    .in_block_ce5(grp_dct_2d_fu_60_in_block_ce5),
    .in_block_q5(buf_2d_in_q5),
    .in_block_address6(grp_dct_2d_fu_60_in_block_address6),
    .in_block_ce6(grp_dct_2d_fu_60_in_block_ce6),
    .in_block_q6(buf_2d_in_q6),
    .in_block_address7(grp_dct_2d_fu_60_in_block_address7),
    .in_block_ce7(grp_dct_2d_fu_60_in_block_ce7),
    .in_block_q7(buf_2d_in_q7),
    .out_block_address0(grp_dct_2d_fu_60_out_block_address0),
    .out_block_ce0(grp_dct_2d_fu_60_out_block_ce0),
    .out_block_we0(grp_dct_2d_fu_60_out_block_we0),
    .out_block_d0(grp_dct_2d_fu_60_out_block_d0)
);

dct_write_data grp_write_data_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_data_fu_82_ap_start),
    .ap_done(grp_write_data_fu_82_ap_done),
    .ap_idle(grp_write_data_fu_82_ap_idle),
    .ap_ready(grp_write_data_fu_82_ap_ready),
    .buf_r_address0(grp_write_data_fu_82_buf_r_address0),
    .buf_r_ce0(grp_write_data_fu_82_buf_r_ce0),
    .buf_r_q0(buf_2d_out_q0),
    .output_r_address0(grp_write_data_fu_82_output_r_address0),
    .output_r_ce0(grp_write_data_fu_82_output_r_ce0),
    .output_r_we0(grp_write_data_fu_82_output_r_we0),
    .output_r_d0(grp_write_data_fu_82_output_r_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dct_2d_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_dct_2d_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_dct_2d_fu_60_ap_ready == 1'b1)) begin
            grp_dct_2d_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_read_data_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_read_data_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_read_data_fu_52_ap_ready == 1'b1)) begin
            grp_read_data_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_data_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_write_data_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_write_data_fu_82_ap_ready == 1'b1)) begin
            grp_write_data_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_read_data_fu_52_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_dct_2d_fu_60_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_write_data_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_write_data_fu_82_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (grp_write_data_fu_82_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_address0 = grp_dct_2d_fu_60_in_block_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_2d_in_address0 = grp_read_data_fu_52_buf_r_address0;
    end else begin
        buf_2d_in_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce0 = grp_dct_2d_fu_60_in_block_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_2d_in_ce0 = grp_read_data_fu_52_buf_r_ce0;
    end else begin
        buf_2d_in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce1 = grp_dct_2d_fu_60_in_block_ce1;
    end else begin
        buf_2d_in_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce2 = grp_dct_2d_fu_60_in_block_ce2;
    end else begin
        buf_2d_in_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce3 = grp_dct_2d_fu_60_in_block_ce3;
    end else begin
        buf_2d_in_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce4 = grp_dct_2d_fu_60_in_block_ce4;
    end else begin
        buf_2d_in_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce5 = grp_dct_2d_fu_60_in_block_ce5;
    end else begin
        buf_2d_in_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce6 = grp_dct_2d_fu_60_in_block_ce6;
    end else begin
        buf_2d_in_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_in_ce7 = grp_dct_2d_fu_60_in_block_ce7;
    end else begin
        buf_2d_in_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        buf_2d_in_we0 = grp_read_data_fu_52_buf_r_we0;
    end else begin
        buf_2d_in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_2d_out_address0 = grp_write_data_fu_82_buf_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_out_address0 = grp_dct_2d_fu_60_out_block_address0;
    end else begin
        buf_2d_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        buf_2d_out_ce0 = grp_write_data_fu_82_buf_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_out_ce0 = grp_dct_2d_fu_60_out_block_ce0;
    end else begin
        buf_2d_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        buf_2d_out_we0 = grp_dct_2d_fu_60_out_block_we0;
    end else begin
        buf_2d_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_read_data_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_dct_2d_fu_60_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_write_data_fu_82_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign grp_dct_2d_fu_60_ap_start = grp_dct_2d_fu_60_ap_start_reg;

assign grp_read_data_fu_52_ap_start = grp_read_data_fu_52_ap_start_reg;

assign grp_write_data_fu_82_ap_start = grp_write_data_fu_82_ap_start_reg;

assign input_r_address0 = grp_read_data_fu_52_input_r_address0;

assign input_r_ce0 = grp_read_data_fu_52_input_r_ce0;

assign output_r_address0 = grp_write_data_fu_82_output_r_address0;

assign output_r_ce0 = grp_write_data_fu_82_output_r_ce0;

assign output_r_d0 = grp_write_data_fu_82_output_r_d0;

assign output_r_we0 = grp_write_data_fu_82_output_r_we0;

endmodule //dct
