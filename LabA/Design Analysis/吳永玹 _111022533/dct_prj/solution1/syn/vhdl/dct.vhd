-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dct is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dct_dct,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.508000,HLS_SYN_LAT=423,HLS_SYN_TPT=none,HLS_SYN_MEM=17,HLS_SYN_DSP=0,HLS_SYN_FF=932,HLS_SYN_LUT=2032,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buf_2d_in_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_in_ce0 : STD_LOGIC;
    signal buf_2d_in_we0 : STD_LOGIC;
    signal buf_2d_in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce1 : STD_LOGIC;
    signal buf_2d_in_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce2 : STD_LOGIC;
    signal buf_2d_in_q2 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce3 : STD_LOGIC;
    signal buf_2d_in_q3 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce4 : STD_LOGIC;
    signal buf_2d_in_q4 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce5 : STD_LOGIC;
    signal buf_2d_in_q5 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce6 : STD_LOGIC;
    signal buf_2d_in_q6 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_in_ce7 : STD_LOGIC;
    signal buf_2d_in_q7 : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_2d_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal buf_2d_out_ce0 : STD_LOGIC;
    signal buf_2d_out_we0 : STD_LOGIC;
    signal buf_2d_out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_52_ap_start : STD_LOGIC;
    signal grp_read_data_fu_52_ap_done : STD_LOGIC;
    signal grp_read_data_fu_52_ap_idle : STD_LOGIC;
    signal grp_read_data_fu_52_ap_ready : STD_LOGIC;
    signal grp_read_data_fu_52_input_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_read_data_fu_52_input_r_ce0 : STD_LOGIC;
    signal grp_read_data_fu_52_buf_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_read_data_fu_52_buf_r_ce0 : STD_LOGIC;
    signal grp_read_data_fu_52_buf_r_we0 : STD_LOGIC;
    signal grp_read_data_fu_52_buf_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_2d_fu_60_ap_start : STD_LOGIC;
    signal grp_dct_2d_fu_60_ap_done : STD_LOGIC;
    signal grp_dct_2d_fu_60_ap_idle : STD_LOGIC;
    signal grp_dct_2d_fu_60_ap_ready : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce1 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce2 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address3 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce3 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce4 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address5 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce5 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address6 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce6 : STD_LOGIC;
    signal grp_dct_2d_fu_60_in_block_address7 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_in_block_ce7 : STD_LOGIC;
    signal grp_dct_2d_fu_60_out_block_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_2d_fu_60_out_block_ce0 : STD_LOGIC;
    signal grp_dct_2d_fu_60_out_block_we0 : STD_LOGIC;
    signal grp_dct_2d_fu_60_out_block_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_data_fu_82_ap_start : STD_LOGIC;
    signal grp_write_data_fu_82_ap_done : STD_LOGIC;
    signal grp_write_data_fu_82_ap_idle : STD_LOGIC;
    signal grp_write_data_fu_82_ap_ready : STD_LOGIC;
    signal grp_write_data_fu_82_buf_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_write_data_fu_82_buf_r_ce0 : STD_LOGIC;
    signal grp_write_data_fu_82_output_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_write_data_fu_82_output_r_ce0 : STD_LOGIC;
    signal grp_write_data_fu_82_output_r_we0 : STD_LOGIC;
    signal grp_write_data_fu_82_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_data_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_dct_2d_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_write_data_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_read_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        buf_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_we0 : OUT STD_LOGIC;
        buf_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_dct_2d IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce0 : OUT STD_LOGIC;
        in_block_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce1 : OUT STD_LOGIC;
        in_block_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce2 : OUT STD_LOGIC;
        in_block_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce3 : OUT STD_LOGIC;
        in_block_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce4 : OUT STD_LOGIC;
        in_block_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce5 : OUT STD_LOGIC;
        in_block_q5 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce6 : OUT STD_LOGIC;
        in_block_q6 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_block_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_block_ce7 : OUT STD_LOGIC;
        in_block_q7 : IN STD_LOGIC_VECTOR (15 downto 0);
        out_block_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_block_ce0 : OUT STD_LOGIC;
        out_block_we0 : OUT STD_LOGIC;
        out_block_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_write_data IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        buf_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        buf_r_ce0 : OUT STD_LOGIC;
        buf_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_buf_2d_in_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address3 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address4 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address5 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address6 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address7 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dct_buf_2d_out_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    buf_2d_in_U : component dct_buf_2d_in_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_in_address0,
        ce0 => buf_2d_in_ce0,
        we0 => buf_2d_in_we0,
        d0 => grp_read_data_fu_52_buf_r_d0,
        q0 => buf_2d_in_q0,
        address1 => grp_dct_2d_fu_60_in_block_address1,
        ce1 => buf_2d_in_ce1,
        q1 => buf_2d_in_q1,
        address2 => grp_dct_2d_fu_60_in_block_address2,
        ce2 => buf_2d_in_ce2,
        q2 => buf_2d_in_q2,
        address3 => grp_dct_2d_fu_60_in_block_address3,
        ce3 => buf_2d_in_ce3,
        q3 => buf_2d_in_q3,
        address4 => grp_dct_2d_fu_60_in_block_address4,
        ce4 => buf_2d_in_ce4,
        q4 => buf_2d_in_q4,
        address5 => grp_dct_2d_fu_60_in_block_address5,
        ce5 => buf_2d_in_ce5,
        q5 => buf_2d_in_q5,
        address6 => grp_dct_2d_fu_60_in_block_address6,
        ce6 => buf_2d_in_ce6,
        q6 => buf_2d_in_q6,
        address7 => grp_dct_2d_fu_60_in_block_address7,
        ce7 => buf_2d_in_ce7,
        q7 => buf_2d_in_q7);

    buf_2d_out_U : component dct_buf_2d_out_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_2d_out_address0,
        ce0 => buf_2d_out_ce0,
        we0 => buf_2d_out_we0,
        d0 => grp_dct_2d_fu_60_out_block_d0,
        q0 => buf_2d_out_q0);

    grp_read_data_fu_52 : component dct_read_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_data_fu_52_ap_start,
        ap_done => grp_read_data_fu_52_ap_done,
        ap_idle => grp_read_data_fu_52_ap_idle,
        ap_ready => grp_read_data_fu_52_ap_ready,
        input_r_address0 => grp_read_data_fu_52_input_r_address0,
        input_r_ce0 => grp_read_data_fu_52_input_r_ce0,
        input_r_q0 => input_r_q0,
        buf_r_address0 => grp_read_data_fu_52_buf_r_address0,
        buf_r_ce0 => grp_read_data_fu_52_buf_r_ce0,
        buf_r_we0 => grp_read_data_fu_52_buf_r_we0,
        buf_r_d0 => grp_read_data_fu_52_buf_r_d0);

    grp_dct_2d_fu_60 : component dct_dct_2d
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_2d_fu_60_ap_start,
        ap_done => grp_dct_2d_fu_60_ap_done,
        ap_idle => grp_dct_2d_fu_60_ap_idle,
        ap_ready => grp_dct_2d_fu_60_ap_ready,
        in_block_address0 => grp_dct_2d_fu_60_in_block_address0,
        in_block_ce0 => grp_dct_2d_fu_60_in_block_ce0,
        in_block_q0 => buf_2d_in_q0,
        in_block_address1 => grp_dct_2d_fu_60_in_block_address1,
        in_block_ce1 => grp_dct_2d_fu_60_in_block_ce1,
        in_block_q1 => buf_2d_in_q1,
        in_block_address2 => grp_dct_2d_fu_60_in_block_address2,
        in_block_ce2 => grp_dct_2d_fu_60_in_block_ce2,
        in_block_q2 => buf_2d_in_q2,
        in_block_address3 => grp_dct_2d_fu_60_in_block_address3,
        in_block_ce3 => grp_dct_2d_fu_60_in_block_ce3,
        in_block_q3 => buf_2d_in_q3,
        in_block_address4 => grp_dct_2d_fu_60_in_block_address4,
        in_block_ce4 => grp_dct_2d_fu_60_in_block_ce4,
        in_block_q4 => buf_2d_in_q4,
        in_block_address5 => grp_dct_2d_fu_60_in_block_address5,
        in_block_ce5 => grp_dct_2d_fu_60_in_block_ce5,
        in_block_q5 => buf_2d_in_q5,
        in_block_address6 => grp_dct_2d_fu_60_in_block_address6,
        in_block_ce6 => grp_dct_2d_fu_60_in_block_ce6,
        in_block_q6 => buf_2d_in_q6,
        in_block_address7 => grp_dct_2d_fu_60_in_block_address7,
        in_block_ce7 => grp_dct_2d_fu_60_in_block_ce7,
        in_block_q7 => buf_2d_in_q7,
        out_block_address0 => grp_dct_2d_fu_60_out_block_address0,
        out_block_ce0 => grp_dct_2d_fu_60_out_block_ce0,
        out_block_we0 => grp_dct_2d_fu_60_out_block_we0,
        out_block_d0 => grp_dct_2d_fu_60_out_block_d0);

    grp_write_data_fu_82 : component dct_write_data
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_data_fu_82_ap_start,
        ap_done => grp_write_data_fu_82_ap_done,
        ap_idle => grp_write_data_fu_82_ap_idle,
        ap_ready => grp_write_data_fu_82_ap_ready,
        buf_r_address0 => grp_write_data_fu_82_buf_r_address0,
        buf_r_ce0 => grp_write_data_fu_82_buf_r_ce0,
        buf_r_q0 => buf_2d_out_q0,
        output_r_address0 => grp_write_data_fu_82_output_r_address0,
        output_r_ce0 => grp_write_data_fu_82_output_r_ce0,
        output_r_we0 => grp_write_data_fu_82_output_r_we0,
        output_r_d0 => grp_write_data_fu_82_output_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dct_2d_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_2d_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_dct_2d_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dct_2d_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_dct_2d_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_data_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_data_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_read_data_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_data_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_read_data_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_data_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_data_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_write_data_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_data_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_write_data_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_read_data_fu_52_ap_done, grp_dct_2d_fu_60_ap_done, grp_write_data_fu_82_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_read_data_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_dct_2d_fu_60_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_write_data_fu_82_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_read_data_fu_52_ap_done)
    begin
        if ((grp_read_data_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_dct_2d_fu_60_ap_done)
    begin
        if ((grp_dct_2d_fu_60_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_write_data_fu_82_ap_done)
    begin
        if ((grp_write_data_fu_82_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_write_data_fu_82_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_write_data_fu_82_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_write_data_fu_82_ap_done, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_write_data_fu_82_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_address0_assign_proc : process(grp_read_data_fu_52_buf_r_address0, grp_dct_2d_fu_60_in_block_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_address0 <= grp_dct_2d_fu_60_in_block_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_2d_in_address0 <= grp_read_data_fu_52_buf_r_address0;
        else 
            buf_2d_in_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_in_ce0_assign_proc : process(grp_read_data_fu_52_buf_r_ce0, grp_dct_2d_fu_60_in_block_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce0 <= grp_dct_2d_fu_60_in_block_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_2d_in_ce0 <= grp_read_data_fu_52_buf_r_ce0;
        else 
            buf_2d_in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce1_assign_proc : process(grp_dct_2d_fu_60_in_block_ce1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce1 <= grp_dct_2d_fu_60_in_block_ce1;
        else 
            buf_2d_in_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce2_assign_proc : process(grp_dct_2d_fu_60_in_block_ce2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce2 <= grp_dct_2d_fu_60_in_block_ce2;
        else 
            buf_2d_in_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce3_assign_proc : process(grp_dct_2d_fu_60_in_block_ce3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce3 <= grp_dct_2d_fu_60_in_block_ce3;
        else 
            buf_2d_in_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce4_assign_proc : process(grp_dct_2d_fu_60_in_block_ce4, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce4 <= grp_dct_2d_fu_60_in_block_ce4;
        else 
            buf_2d_in_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce5_assign_proc : process(grp_dct_2d_fu_60_in_block_ce5, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce5 <= grp_dct_2d_fu_60_in_block_ce5;
        else 
            buf_2d_in_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce6_assign_proc : process(grp_dct_2d_fu_60_in_block_ce6, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce6 <= grp_dct_2d_fu_60_in_block_ce6;
        else 
            buf_2d_in_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_ce7_assign_proc : process(grp_dct_2d_fu_60_in_block_ce7, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_in_ce7 <= grp_dct_2d_fu_60_in_block_ce7;
        else 
            buf_2d_in_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_in_we0_assign_proc : process(grp_read_data_fu_52_buf_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            buf_2d_in_we0 <= grp_read_data_fu_52_buf_r_we0;
        else 
            buf_2d_in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_address0_assign_proc : process(grp_dct_2d_fu_60_out_block_address0, grp_write_data_fu_82_buf_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_address0 <= grp_write_data_fu_82_buf_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_out_address0 <= grp_dct_2d_fu_60_out_block_address0;
        else 
            buf_2d_out_address0 <= "XXXXXX";
        end if; 
    end process;


    buf_2d_out_ce0_assign_proc : process(grp_dct_2d_fu_60_out_block_ce0, grp_write_data_fu_82_buf_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            buf_2d_out_ce0 <= grp_write_data_fu_82_buf_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_out_ce0 <= grp_dct_2d_fu_60_out_block_ce0;
        else 
            buf_2d_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_2d_out_we0_assign_proc : process(grp_dct_2d_fu_60_out_block_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            buf_2d_out_we0 <= grp_dct_2d_fu_60_out_block_we0;
        else 
            buf_2d_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_dct_2d_fu_60_ap_start <= grp_dct_2d_fu_60_ap_start_reg;
    grp_read_data_fu_52_ap_start <= grp_read_data_fu_52_ap_start_reg;
    grp_write_data_fu_82_ap_start <= grp_write_data_fu_82_ap_start_reg;
    input_r_address0 <= grp_read_data_fu_52_input_r_address0;
    input_r_ce0 <= grp_read_data_fu_52_input_r_ce0;
    output_r_address0 <= grp_write_data_fu_82_output_r_address0;
    output_r_ce0 <= grp_write_data_fu_82_output_r_ce0;
    output_r_d0 <= grp_write_data_fu_82_output_r_d0;
    output_r_we0 <= grp_write_data_fu_82_output_r_we0;
end behav;
