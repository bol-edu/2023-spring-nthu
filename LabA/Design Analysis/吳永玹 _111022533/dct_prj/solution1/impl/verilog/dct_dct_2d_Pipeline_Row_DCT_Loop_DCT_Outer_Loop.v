// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_2d_Pipeline_Row_DCT_Loop_DCT_Outer_Loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_block_address0,
        in_block_ce0,
        in_block_q0,
        in_block_address1,
        in_block_ce1,
        in_block_q1,
        in_block_address2,
        in_block_ce2,
        in_block_q2,
        in_block_address3,
        in_block_ce3,
        in_block_q3,
        in_block_address4,
        in_block_ce4,
        in_block_q4,
        in_block_address5,
        in_block_ce5,
        in_block_q5,
        in_block_address6,
        in_block_ce6,
        in_block_q6,
        in_block_address7,
        in_block_ce7,
        in_block_q7,
        row_outbuf_address0,
        row_outbuf_ce0,
        row_outbuf_we0,
        row_outbuf_d0,
        dct_coeff_table_0_address0,
        dct_coeff_table_0_ce0,
        dct_coeff_table_0_q0,
        dct_coeff_table_1_address0,
        dct_coeff_table_1_ce0,
        dct_coeff_table_1_q0,
        dct_coeff_table_2_address0,
        dct_coeff_table_2_ce0,
        dct_coeff_table_2_q0,
        dct_coeff_table_3_address0,
        dct_coeff_table_3_ce0,
        dct_coeff_table_3_q0,
        dct_coeff_table_4_address0,
        dct_coeff_table_4_ce0,
        dct_coeff_table_4_q0,
        dct_coeff_table_5_address0,
        dct_coeff_table_5_ce0,
        dct_coeff_table_5_q0,
        dct_coeff_table_6_address0,
        dct_coeff_table_6_ce0,
        dct_coeff_table_6_q0,
        dct_coeff_table_7_address0,
        dct_coeff_table_7_ce0,
        dct_coeff_table_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_block_address0;
output   in_block_ce0;
input  [15:0] in_block_q0;
output  [5:0] in_block_address1;
output   in_block_ce1;
input  [15:0] in_block_q1;
output  [5:0] in_block_address2;
output   in_block_ce2;
input  [15:0] in_block_q2;
output  [5:0] in_block_address3;
output   in_block_ce3;
input  [15:0] in_block_q3;
output  [5:0] in_block_address4;
output   in_block_ce4;
input  [15:0] in_block_q4;
output  [5:0] in_block_address5;
output   in_block_ce5;
input  [15:0] in_block_q5;
output  [5:0] in_block_address6;
output   in_block_ce6;
input  [15:0] in_block_q6;
output  [5:0] in_block_address7;
output   in_block_ce7;
input  [15:0] in_block_q7;
output  [5:0] row_outbuf_address0;
output   row_outbuf_ce0;
output   row_outbuf_we0;
output  [15:0] row_outbuf_d0;
output  [2:0] dct_coeff_table_0_address0;
output   dct_coeff_table_0_ce0;
input  [13:0] dct_coeff_table_0_q0;
output  [2:0] dct_coeff_table_1_address0;
output   dct_coeff_table_1_ce0;
input  [14:0] dct_coeff_table_1_q0;
output  [2:0] dct_coeff_table_2_address0;
output   dct_coeff_table_2_ce0;
input  [14:0] dct_coeff_table_2_q0;
output  [2:0] dct_coeff_table_3_address0;
output   dct_coeff_table_3_ce0;
input  [14:0] dct_coeff_table_3_q0;
output  [2:0] dct_coeff_table_4_address0;
output   dct_coeff_table_4_ce0;
input  [14:0] dct_coeff_table_4_q0;
output  [2:0] dct_coeff_table_5_address0;
output   dct_coeff_table_5_ce0;
input  [14:0] dct_coeff_table_5_q0;
output  [2:0] dct_coeff_table_6_address0;
output   dct_coeff_table_6_ce0;
input  [14:0] dct_coeff_table_6_q0;
output  [2:0] dct_coeff_table_7_address0;
output   dct_coeff_table_7_ce0;
input  [14:0] dct_coeff_table_7_q0;

reg ap_idle;
reg in_block_ce0;
reg in_block_ce1;
reg in_block_ce2;
reg in_block_ce3;
reg in_block_ce4;
reg in_block_ce5;
reg in_block_ce6;
reg in_block_ce7;
reg row_outbuf_ce0;
reg row_outbuf_we0;
reg dct_coeff_table_0_ce0;
reg dct_coeff_table_1_ce0;
reg dct_coeff_table_2_ce0;
reg dct_coeff_table_3_ce0;
reg dct_coeff_table_4_ce0;
reg dct_coeff_table_5_ce0;
reg dct_coeff_table_6_ce0;
reg dct_coeff_table_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_339_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln24_1_fu_568_p2;
reg   [5:0] add_ln24_1_reg_803;
reg   [5:0] add_ln24_1_reg_803_pp0_iter1_reg;
reg   [5:0] add_ln24_1_reg_803_pp0_iter2_reg;
reg   [5:0] add_ln24_1_reg_803_pp0_iter3_reg;
reg   [5:0] add_ln24_1_reg_803_pp0_iter4_reg;
reg   [5:0] add_ln24_1_reg_803_pp0_iter5_reg;
reg   [5:0] add_ln24_1_reg_803_pp0_iter6_reg;
reg  signed [15:0] in_block_load_reg_848;
reg  signed [15:0] in_block_load_3_reg_863;
reg  signed [15:0] in_block_load_5_reg_873;
reg  signed [15:0] in_block_load_6_reg_878;
reg   [13:0] dct_coeff_table_0_load_reg_888;
reg  signed [14:0] dct_coeff_table_3_load_reg_903;
reg  signed [14:0] dct_coeff_table_5_load_reg_913;
reg  signed [14:0] dct_coeff_table_6_load_reg_918;
wire  signed [28:0] grp_fu_678_p2;
wire  signed [28:0] grp_fu_684_p2;
wire  signed [28:0] grp_fu_690_p2;
wire   [28:0] grp_fu_696_p3;
wire  signed [28:0] grp_fu_704_p3;
reg  signed [28:0] add_ln24_2_reg_988;
wire  signed [28:0] grp_fu_712_p3;
reg  signed [28:0] add_ln24_3_reg_993;
(* use_dsp48 = "no" *) wire   [28:0] add_ln24_8_fu_651_p2;
reg   [28:0] add_ln24_8_reg_998;
reg   [15:0] trunc_ln_reg_1003;
wire   [63:0] zext_ln42_fu_414_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln22_fu_433_p1;
wire   [63:0] zext_ln22_1_fu_452_p1;
wire   [63:0] zext_ln22_2_fu_471_p1;
wire   [63:0] zext_ln22_3_fu_490_p1;
wire   [63:0] zext_ln22_4_fu_509_p1;
wire   [63:0] zext_ln22_5_fu_528_p1;
wire   [63:0] zext_ln22_6_fu_547_p1;
wire   [63:0] k_cast_fu_552_p1;
wire   [63:0] zext_ln24_1_fu_674_p1;
reg   [3:0] k_fu_80;
wire   [3:0] add_ln18_fu_574_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [3:0] i_fu_84;
wire   [3:0] select_ln42_1_fu_386_p3;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [6:0] indvar_flatten_fu_88;
wire   [6:0] add_ln42_1_fu_345_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] trunc_ln22_fu_327_p1;
wire   [3:0] add_ln42_fu_354_p2;
wire   [0:0] icmp_ln18_fu_364_p2;
wire   [2:0] trunc_ln37_fu_360_p1;
wire   [2:0] trunc_ln24_fu_394_p1;
wire   [5:0] tmp_8_cast_fu_378_p3;
wire   [5:0] tmp_cast_fu_331_p3;
wire   [5:0] select_ln42_2_fu_406_p3;
wire   [5:0] select_ln42_10_fu_419_p3;
wire   [5:0] or_ln42_fu_427_p2;
wire   [5:0] select_ln42_11_fu_438_p3;
wire   [5:0] or_ln42_1_fu_446_p2;
wire   [5:0] select_ln42_12_fu_457_p3;
wire   [5:0] or_ln42_2_fu_465_p2;
wire   [5:0] select_ln42_13_fu_476_p3;
wire   [5:0] or_ln42_3_fu_484_p2;
wire   [5:0] select_ln42_14_fu_495_p3;
wire   [5:0] or_ln42_4_fu_503_p2;
wire   [5:0] select_ln42_15_fu_514_p3;
wire   [5:0] or_ln42_5_fu_522_p2;
wire   [5:0] select_ln42_16_fu_533_p3;
wire   [5:0] or_ln42_6_fu_541_p2;
wire   [3:0] select_ln42_fu_370_p3;
wire   [5:0] tmp_s_fu_398_p3;
wire   [5:0] zext_ln24_fu_564_p1;
wire  signed [28:0] add_ln24_8_fu_651_p0;
wire   [28:0] grp_fu_729_p3;
wire  signed [28:0] grp_fu_720_p3;
(* use_dsp48 = "no" *) wire   [28:0] add_ln24_4_fu_655_p2;
wire   [28:0] add_ln24_fu_659_p2;
wire   [12:0] grp_fu_696_p2;
wire   [13:0] grp_fu_704_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [28:0] grp_fu_704_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_q6),
    .din1(dct_coeff_table_1_q0),
    .ce(1'b1),
    .dout(grp_fu_678_p2)
);

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_q5),
    .din1(dct_coeff_table_2_q0),
    .ce(1'b1),
    .dout(grp_fu_684_p2)
);

dct_mul_mul_16s_15s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 29 ))
mul_mul_16s_15s_29_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_q3),
    .din1(dct_coeff_table_4_q0),
    .ce(1'b1),
    .dout(grp_fu_690_p2)
);

dct_mac_muladd_16s_15s_13ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 13 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_13ns_29_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_q0),
    .din1(dct_coeff_table_7_q0),
    .din2(grp_fu_696_p2),
    .ce(1'b1),
    .dout(grp_fu_696_p3)
);

dct_mac_muladd_16s_14ns_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_14ns_29s_29_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_load_reg_848),
    .din1(grp_fu_704_p1),
    .din2(grp_fu_678_p2),
    .ce(1'b1),
    .dout(grp_fu_704_p3)
);

dct_mac_muladd_16s_15s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29s_29_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_load_3_reg_863),
    .din1(dct_coeff_table_3_load_reg_903),
    .din2(grp_fu_684_p2),
    .ce(1'b1),
    .dout(grp_fu_712_p3)
);

dct_mac_muladd_16s_15s_29s_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29s_29_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_load_5_reg_873),
    .din1(dct_coeff_table_5_load_reg_913),
    .din2(grp_fu_690_p2),
    .ce(1'b1),
    .dout(grp_fu_720_p3)
);

dct_mac_muladd_16s_15s_29ns_29_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 29 ),
    .dout_WIDTH( 29 ))
mac_muladd_16s_15s_29ns_29_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(in_block_load_6_reg_878),
    .din1(dct_coeff_table_6_load_reg_918),
    .din2(grp_fu_696_p3),
    .ce(1'b1),
    .dout(grp_fu_729_p3)
);

dct_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_84 <= select_ln42_1_fu_386_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_88 <= add_ln42_1_fu_345_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_88 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln42_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_80 <= add_ln18_fu_574_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_80 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_339_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln24_1_reg_803 <= add_ln24_1_fu_568_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln24_1_reg_803_pp0_iter1_reg <= add_ln24_1_reg_803;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        dct_coeff_table_0_load_reg_888 <= dct_coeff_table_0_q0;
        dct_coeff_table_3_load_reg_903 <= dct_coeff_table_3_q0;
        dct_coeff_table_5_load_reg_913 <= dct_coeff_table_5_q0;
        dct_coeff_table_6_load_reg_918 <= dct_coeff_table_6_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln24_1_reg_803_pp0_iter2_reg <= add_ln24_1_reg_803_pp0_iter1_reg;
        add_ln24_1_reg_803_pp0_iter3_reg <= add_ln24_1_reg_803_pp0_iter2_reg;
        add_ln24_1_reg_803_pp0_iter4_reg <= add_ln24_1_reg_803_pp0_iter3_reg;
        add_ln24_1_reg_803_pp0_iter5_reg <= add_ln24_1_reg_803_pp0_iter4_reg;
        add_ln24_1_reg_803_pp0_iter6_reg <= add_ln24_1_reg_803_pp0_iter5_reg;
        add_ln24_8_reg_998 <= add_ln24_8_fu_651_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        trunc_ln_reg_1003 <= {{add_ln24_fu_659_p2[28:13]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        add_ln24_2_reg_988 <= grp_fu_704_p3;
        add_ln24_3_reg_993 <= grp_fu_712_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_load_3_reg_863 <= in_block_q4;
        in_block_load_5_reg_873 <= in_block_q2;
        in_block_load_6_reg_878 <= in_block_q1;
        in_block_load_reg_848 <= in_block_q7;
    end
end

always @ (*) begin
    if (((icmp_ln42_fu_339_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter6_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_0_ce0 = 1'b1;
    end else begin
        dct_coeff_table_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_1_ce0 = 1'b1;
    end else begin
        dct_coeff_table_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_2_ce0 = 1'b1;
    end else begin
        dct_coeff_table_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_3_ce0 = 1'b1;
    end else begin
        dct_coeff_table_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_4_ce0 = 1'b1;
    end else begin
        dct_coeff_table_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_5_ce0 = 1'b1;
    end else begin
        dct_coeff_table_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_6_ce0 = 1'b1;
    end else begin
        dct_coeff_table_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_coeff_table_7_ce0 = 1'b1;
    end else begin
        dct_coeff_table_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce0 = 1'b1;
    end else begin
        in_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce1 = 1'b1;
    end else begin
        in_block_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce2 = 1'b1;
    end else begin
        in_block_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce3 = 1'b1;
    end else begin
        in_block_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce4 = 1'b1;
    end else begin
        in_block_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce5 = 1'b1;
    end else begin
        in_block_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce6 = 1'b1;
    end else begin
        in_block_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_block_ce7 = 1'b1;
    end else begin
        in_block_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        row_outbuf_ce0 = 1'b1;
    end else begin
        row_outbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        row_outbuf_we0 = 1'b1;
    end else begin
        row_outbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_574_p2 = (select_ln42_fu_370_p3 + 4'd1);

assign add_ln24_1_fu_568_p2 = (tmp_s_fu_398_p3 + zext_ln24_fu_564_p1);

assign add_ln24_4_fu_655_p2 = ($signed(add_ln24_3_reg_993) + $signed(add_ln24_2_reg_988));

assign add_ln24_8_fu_651_p0 = grp_fu_729_p3;

assign add_ln24_8_fu_651_p2 = ($signed(add_ln24_8_fu_651_p0) + $signed(grp_fu_720_p3));

assign add_ln24_fu_659_p2 = (add_ln24_8_reg_998 + add_ln24_4_fu_655_p2);

assign add_ln42_1_fu_345_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln42_fu_354_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dct_coeff_table_0_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_1_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_2_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_3_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_4_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_5_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_6_address0 = k_cast_fu_552_p1;

assign dct_coeff_table_7_address0 = k_cast_fu_552_p1;

assign grp_fu_696_p2 = 29'd4096;

assign grp_fu_704_p1 = grp_fu_704_p10;

assign grp_fu_704_p10 = dct_coeff_table_0_load_reg_888;

assign icmp_ln18_fu_364_p2 = ((ap_sig_allocacmp_k_load == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_339_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign in_block_address0 = zext_ln22_6_fu_547_p1;

assign in_block_address1 = zext_ln22_5_fu_528_p1;

assign in_block_address2 = zext_ln22_4_fu_509_p1;

assign in_block_address3 = zext_ln22_3_fu_490_p1;

assign in_block_address4 = zext_ln22_2_fu_471_p1;

assign in_block_address5 = zext_ln22_1_fu_452_p1;

assign in_block_address6 = zext_ln22_fu_433_p1;

assign in_block_address7 = zext_ln42_fu_414_p1;

assign k_cast_fu_552_p1 = select_ln42_fu_370_p3;

assign or_ln42_1_fu_446_p2 = (select_ln42_11_fu_438_p3 | 6'd2);

assign or_ln42_2_fu_465_p2 = (select_ln42_12_fu_457_p3 | 6'd3);

assign or_ln42_3_fu_484_p2 = (select_ln42_13_fu_476_p3 | 6'd4);

assign or_ln42_4_fu_503_p2 = (select_ln42_14_fu_495_p3 | 6'd5);

assign or_ln42_5_fu_522_p2 = (select_ln42_15_fu_514_p3 | 6'd6);

assign or_ln42_6_fu_541_p2 = (select_ln42_16_fu_533_p3 | 6'd7);

assign or_ln42_fu_427_p2 = (select_ln42_10_fu_419_p3 | 6'd1);

assign row_outbuf_address0 = zext_ln24_1_fu_674_p1;

assign row_outbuf_d0 = trunc_ln_reg_1003;

assign select_ln42_10_fu_419_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_11_fu_438_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_12_fu_457_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_13_fu_476_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_14_fu_495_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_15_fu_514_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_16_fu_533_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_1_fu_386_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? add_ln42_fu_354_p2 : ap_sig_allocacmp_i_1);

assign select_ln42_2_fu_406_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? tmp_8_cast_fu_378_p3 : tmp_cast_fu_331_p3);

assign select_ln42_fu_370_p3 = ((icmp_ln18_fu_364_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_k_load);

assign tmp_8_cast_fu_378_p3 = {{trunc_ln37_fu_360_p1}, {3'd0}};

assign tmp_cast_fu_331_p3 = {{trunc_ln22_fu_327_p1}, {3'd0}};

assign tmp_s_fu_398_p3 = {{trunc_ln24_fu_394_p1}, {3'd0}};

assign trunc_ln22_fu_327_p1 = ap_sig_allocacmp_i_1[2:0];

assign trunc_ln24_fu_394_p1 = select_ln42_1_fu_386_p3[2:0];

assign trunc_ln37_fu_360_p1 = add_ln42_fu_354_p2[2:0];

assign zext_ln22_1_fu_452_p1 = or_ln42_1_fu_446_p2;

assign zext_ln22_2_fu_471_p1 = or_ln42_2_fu_465_p2;

assign zext_ln22_3_fu_490_p1 = or_ln42_3_fu_484_p2;

assign zext_ln22_4_fu_509_p1 = or_ln42_4_fu_503_p2;

assign zext_ln22_5_fu_528_p1 = or_ln42_5_fu_522_p2;

assign zext_ln22_6_fu_547_p1 = or_ln42_6_fu_541_p2;

assign zext_ln22_fu_433_p1 = or_ln42_fu_427_p2;

assign zext_ln24_1_fu_674_p1 = add_ln24_1_reg_803_pp0_iter6_reg;

assign zext_ln24_fu_564_p1 = select_ln42_fu_370_p3;

assign zext_ln42_fu_414_p1 = select_ln42_2_fu_406_p3;

endmodule //dct_dct_2d_Pipeline_Row_DCT_Loop_DCT_Outer_Loop
