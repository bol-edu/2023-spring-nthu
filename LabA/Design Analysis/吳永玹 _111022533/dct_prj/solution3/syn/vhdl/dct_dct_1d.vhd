-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dct_dct_1d is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce0 : OUT STD_LOGIC;
    src_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    src_ce1 : OUT STD_LOGIC;
    src_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    src_offset : IN STD_LOGIC_VECTOR (2 downto 0);
    dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dst_ce0 : OUT STD_LOGIC;
    dst_we0 : OUT STD_LOGIC;
    dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_offset : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of dct_dct_1d is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_166_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_reg_259 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal src_load_reg_289 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_1_reg_294 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal src_load_2_reg_309 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_3_reg_314 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal src_load_4_reg_329 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_5_reg_334 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_250_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_339 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal src_load_6_reg_344 : STD_LOGIC_VECTOR (15 downto 0);
    signal src_load_7_reg_349 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_idle : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0 : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0 : STD_LOGIC;
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln4_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_cast_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_cast_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_cast_fu_205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_cast_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_cast_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_179_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_190_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_200_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_210_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_220_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_240_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dct_dct_1d_Pipeline_DCT_Outer_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln22 : IN STD_LOGIC_VECTOR (5 downto 0);
        dst_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        dst_ce0 : OUT STD_LOGIC;
        dst_we0 : OUT STD_LOGIC;
        dst_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sext_ln8 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln19_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln22 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133 : component dct_dct_1d_Pipeline_DCT_Outer_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start,
        ap_done => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done,
        ap_idle => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_idle,
        ap_ready => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready,
        zext_ln22 => tmp_reg_339,
        dst_address0 => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0,
        dst_ce0 => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0,
        dst_we0 => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0,
        dst_d0 => grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0,
        sext_ln8 => src_load_reg_289,
        sext_ln19 => src_load_1_reg_294,
        sext_ln19_1 => src_load_2_reg_309,
        sext_ln19_2 => src_load_3_reg_314,
        sext_ln19_3 => src_load_4_reg_329,
        sext_ln19_4 => src_load_5_reg_334,
        sext_ln19_5 => src_load_6_reg_344,
        sext_ln22 => src_load_7_reg_349);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready = ap_const_logic_1)) then 
                    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                src_load_1_reg_294 <= src_q0;
                src_load_reg_289 <= src_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                src_load_2_reg_309 <= src_q1;
                src_load_3_reg_314 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                src_load_4_reg_329 <= src_q1;
                src_load_5_reg_334 <= src_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                src_load_6_reg_344 <= src_q1;
                src_load_7_reg_349 <= src_q0;
                    tmp_reg_339(5 downto 3) <= tmp_fu_250_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    tmp_1_reg_259(5 downto 3) <= tmp_1_fu_166_p3(5 downto 3);
            end if;
        end if;
    end process;
    tmp_1_reg_259(2 downto 0) <= "000";
    tmp_reg_339(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done)
    begin
        if ((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done, ap_CS_fsm_state6)
    begin
        if ((((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done, ap_CS_fsm_state6)
    begin
        if (((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dst_address0 <= grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0;
    dst_ce0 <= grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0;
    dst_d0 <= grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0;
    dst_we0 <= grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0;
    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start <= grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg;

    src_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_2_cast_fu_185_p1, tmp_4_cast_fu_205_p1, tmp_6_cast_fu_225_p1, tmp_8_cast_fu_245_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address0 <= tmp_8_cast_fu_245_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address0 <= tmp_6_cast_fu_225_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address0 <= tmp_4_cast_fu_205_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address0 <= tmp_2_cast_fu_185_p1(6 - 1 downto 0);
        else 
            src_address0 <= "XXXXXX";
        end if; 
    end process;


    src_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, zext_ln4_fu_174_p1, tmp_3_cast_fu_195_p1, tmp_5_cast_fu_215_p1, tmp_7_cast_fu_235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            src_address1 <= tmp_7_cast_fu_235_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            src_address1 <= tmp_5_cast_fu_215_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            src_address1 <= tmp_3_cast_fu_195_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            src_address1 <= zext_ln4_fu_174_p1(6 - 1 downto 0);
        else 
            src_address1 <= "XXXXXX";
        end if; 
    end process;


    src_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            src_ce0 <= ap_const_logic_1;
        else 
            src_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    src_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            src_ce1 <= ap_const_logic_1;
        else 
            src_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_166_p3 <= (src_offset & ap_const_lv3_0);
    tmp_2_cast_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_179_p2),64));
    tmp_2_fu_179_p2 <= (tmp_1_fu_166_p3 or ap_const_lv6_1);
    tmp_3_cast_fu_195_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_190_p2),64));
    tmp_3_fu_190_p2 <= (tmp_1_reg_259 or ap_const_lv6_2);
    tmp_4_cast_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_200_p2),64));
    tmp_4_fu_200_p2 <= (tmp_1_reg_259 or ap_const_lv6_3);
    tmp_5_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_210_p2),64));
    tmp_5_fu_210_p2 <= (tmp_1_reg_259 or ap_const_lv6_4);
    tmp_6_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_220_p2),64));
    tmp_6_fu_220_p2 <= (tmp_1_reg_259 or ap_const_lv6_5);
    tmp_7_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_230_p2),64));
    tmp_7_fu_230_p2 <= (tmp_1_reg_259 or ap_const_lv6_6);
    tmp_8_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_240_p2),64));
    tmp_8_fu_240_p2 <= (tmp_1_reg_259 or ap_const_lv6_7);
    tmp_fu_250_p3 <= (dst_offset & ap_const_lv3_0);
    zext_ln4_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_166_p3),64));
end behav;
