// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dct_dct_1d (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        src_address0,
        src_ce0,
        src_q0,
        src_address1,
        src_ce1,
        src_q1,
        src_offset,
        dst_address0,
        dst_ce0,
        dst_we0,
        dst_d0,
        dst_offset
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] src_address0;
output   src_ce0;
input  [15:0] src_q0;
output  [5:0] src_address1;
output   src_ce1;
input  [15:0] src_q1;
input  [2:0] src_offset;
output  [5:0] dst_address0;
output   dst_ce0;
output   dst_we0;
output  [15:0] dst_d0;
input  [2:0] dst_offset;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] src_address0;
reg src_ce0;
reg[5:0] src_address1;
reg src_ce1;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_1_fu_166_p3;
reg   [5:0] tmp_1_reg_259;
wire    ap_CS_fsm_state2;
reg   [15:0] src_load_reg_289;
reg   [15:0] src_load_1_reg_294;
wire    ap_CS_fsm_state3;
reg   [15:0] src_load_2_reg_309;
reg   [15:0] src_load_3_reg_314;
wire    ap_CS_fsm_state4;
reg   [15:0] src_load_4_reg_329;
reg   [15:0] src_load_5_reg_334;
wire   [5:0] tmp_fu_250_p3;
reg   [5:0] tmp_reg_339;
wire    ap_CS_fsm_state5;
reg   [15:0] src_load_6_reg_344;
reg   [15:0] src_load_7_reg_349;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_idle;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready;
wire   [5:0] grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0;
wire    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0;
wire   [15:0] grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0;
reg    grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln4_fu_174_p1;
wire   [63:0] tmp_2_cast_fu_185_p1;
wire   [63:0] tmp_3_cast_fu_195_p1;
wire   [63:0] tmp_4_cast_fu_205_p1;
wire   [63:0] tmp_5_cast_fu_215_p1;
wire   [63:0] tmp_6_cast_fu_225_p1;
wire   [63:0] tmp_7_cast_fu_235_p1;
wire   [63:0] tmp_8_cast_fu_245_p1;
wire   [5:0] tmp_2_fu_179_p2;
wire   [5:0] tmp_3_fu_190_p2;
wire   [5:0] tmp_4_fu_200_p2;
wire   [5:0] tmp_5_fu_210_p2;
wire   [5:0] tmp_6_fu_220_p2;
wire   [5:0] tmp_7_fu_230_p2;
wire   [5:0] tmp_8_fu_240_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg = 1'b0;
end

dct_dct_1d_Pipeline_DCT_Outer_Loop grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start),
    .ap_done(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done),
    .ap_idle(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_idle),
    .ap_ready(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready),
    .zext_ln22(tmp_reg_339),
    .dst_address0(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0),
    .dst_ce0(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0),
    .dst_we0(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0),
    .dst_d0(grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0),
    .sext_ln8(src_load_reg_289),
    .sext_ln19(src_load_1_reg_294),
    .sext_ln19_1(src_load_2_reg_309),
    .sext_ln19_2(src_load_3_reg_314),
    .sext_ln19_3(src_load_4_reg_329),
    .sext_ln19_4(src_load_5_reg_334),
    .sext_ln19_5(src_load_6_reg_344),
    .sext_ln22(src_load_7_reg_349)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= 1'b1;
        end else if ((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_ready == 1'b1)) begin
            grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        src_load_1_reg_294 <= src_q0;
        src_load_reg_289 <= src_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        src_load_2_reg_309 <= src_q1;
        src_load_3_reg_314 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        src_load_4_reg_329 <= src_q1;
        src_load_5_reg_334 <= src_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        src_load_6_reg_344 <= src_q1;
        src_load_7_reg_349 <= src_q0;
        tmp_reg_339[5 : 3] <= tmp_fu_250_p3[5 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_reg_259[5 : 3] <= tmp_1_fu_166_p3[5 : 3];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address0 = tmp_8_cast_fu_245_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address0 = tmp_6_cast_fu_225_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_address0 = tmp_4_cast_fu_205_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        src_address0 = tmp_2_cast_fu_185_p1;
    end else begin
        src_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        src_address1 = tmp_7_cast_fu_235_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        src_address1 = tmp_5_cast_fu_215_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        src_address1 = tmp_3_cast_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        src_address1 = zext_ln4_fu_174_p1;
    end else begin
        src_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        src_ce0 = 1'b1;
    end else begin
        src_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        src_ce1 = 1'b1;
    end else begin
        src_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign dst_address0 = grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_address0;

assign dst_ce0 = grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_ce0;

assign dst_d0 = grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_d0;

assign dst_we0 = grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_dst_we0;

assign grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start = grp_dct_1d_Pipeline_DCT_Outer_Loop_fu_133_ap_start_reg;

assign tmp_1_fu_166_p3 = {{src_offset}, {3'd0}};

assign tmp_2_cast_fu_185_p1 = tmp_2_fu_179_p2;

assign tmp_2_fu_179_p2 = (tmp_1_fu_166_p3 | 6'd1);

assign tmp_3_cast_fu_195_p1 = tmp_3_fu_190_p2;

assign tmp_3_fu_190_p2 = (tmp_1_reg_259 | 6'd2);

assign tmp_4_cast_fu_205_p1 = tmp_4_fu_200_p2;

assign tmp_4_fu_200_p2 = (tmp_1_reg_259 | 6'd3);

assign tmp_5_cast_fu_215_p1 = tmp_5_fu_210_p2;

assign tmp_5_fu_210_p2 = (tmp_1_reg_259 | 6'd4);

assign tmp_6_cast_fu_225_p1 = tmp_6_fu_220_p2;

assign tmp_6_fu_220_p2 = (tmp_1_reg_259 | 6'd5);

assign tmp_7_cast_fu_235_p1 = tmp_7_fu_230_p2;

assign tmp_7_fu_230_p2 = (tmp_1_reg_259 | 6'd6);

assign tmp_8_cast_fu_245_p1 = tmp_8_fu_240_p2;

assign tmp_8_fu_240_p2 = (tmp_1_reg_259 | 6'd7);

assign tmp_fu_250_p3 = {{dst_offset}, {3'd0}};

assign zext_ln4_fu_174_p1 = tmp_1_fu_166_p3;

always @ (posedge ap_clk) begin
    tmp_1_reg_259[2:0] <= 3'b000;
    tmp_reg_339[2:0] <= 3'b000;
end

endmodule //dct_dct_1d
